{
  "total": 165,
  "components": [
    {
      "moduleName": "Accordion",
      "filePath": "src/Accordion/Accordion.svelte",
      "props": [
        {
          "name": "align",
          "kind": "let",
          "description": "Specify alignment of accordion item chevron icon",
          "type": "\"start\" | \"end\"",
          "value": "\"end\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the accordion",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the accordion",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "skeleton",
          "kind": "let",
          "description": "Set to `true` to display the skeleton state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        {
          "type": "forwarded",
          "name": "click",
          "element": "AccordionSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseover",
          "element": "AccordionSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseenter",
          "element": "AccordionSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseleave",
          "element": "AccordionSkeleton"
        }
      ],
      "typedefs": [],
      "rest_props": { "type": "InlineComponent", "name": "AccordionSkeleton" },
      "extends": {
        "interface": "AccordionSkeletonProps",
        "import": "\"./AccordionSkeleton.svelte\""
      }
    },
    {
      "moduleName": "AccordionItem",
      "filePath": "src/Accordion/AccordionItem.svelte",
      "props": [
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title of the accordion item heading\nAlternatively, use the \"title\" slot (e.g., <div slot=\"title\">...</div>)",
          "type": "string",
          "value": "\"title\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the first accordion item",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the accordion item",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the accordion item chevron icon",
          "type": "string",
          "value": "\"Expand/Collapse\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "title",
          "default": false,
          "fallback": "{title}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "animationend", "element": "li" },
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "mouseover", "element": "button" },
        { "type": "forwarded", "name": "mouseenter", "element": "button" },
        { "type": "forwarded", "name": "mouseleave", "element": "button" },
        { "type": "forwarded", "name": "keydown", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "li" }
    },
    {
      "moduleName": "AccordionSkeleton",
      "filePath": "src/Accordion/AccordionSkeleton.svelte",
      "props": [
        {
          "name": "count",
          "kind": "let",
          "description": "Specify the number of accordion items to render",
          "type": "number",
          "value": "4",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "align",
          "kind": "let",
          "description": "Specify alignment of accordion item chevron icon",
          "type": "\"start\" | \"end\"",
          "value": "\"end\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the accordion",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `false` to close the first accordion item",
          "type": "boolean",
          "value": "true",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "ul" },
        { "type": "forwarded", "name": "mouseover", "element": "ul" },
        { "type": "forwarded", "name": "mouseenter", "element": "ul" },
        { "type": "forwarded", "name": "mouseleave", "element": "ul" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "ul" }
    },
    {
      "moduleName": "AspectRatio",
      "filePath": "src/AspectRatio/AspectRatio.svelte",
      "props": [
        {
          "name": "ratio",
          "kind": "let",
          "description": "Specify the aspect ratio",
          "type": "\"2x1\" | \"2x3\" | \"16x9\" | \"4x3\" | \"1x1\" | \"3x4\" | \"3x2\" | \"9x16\" | \"1x2\"",
          "value": "\"2x1\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Breadcrumb",
      "filePath": "src/Breadcrumb/Breadcrumb.svelte",
      "props": [
        {
          "name": "noTrailingSlash",
          "kind": "let",
          "description": "Set to `true` to hide the breadcrumb trailing slash",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "skeleton",
          "kind": "let",
          "description": "Set to `true` to display skeleton state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        {
          "type": "forwarded",
          "name": "click",
          "element": "BreadcrumbSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseover",
          "element": "BreadcrumbSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseenter",
          "element": "BreadcrumbSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseleave",
          "element": "BreadcrumbSkeleton"
        }
      ],
      "typedefs": [],
      "rest_props": { "type": "InlineComponent", "name": "BreadcrumbSkeleton" },
      "extends": {
        "interface": "BreadcrumbSkeletonProps",
        "import": "\"./BreadcrumbSkeleton.svelte\""
      }
    },
    {
      "moduleName": "BreadcrumbItem",
      "filePath": "src/Breadcrumb/BreadcrumbItem.svelte",
      "props": [
        {
          "name": "href",
          "kind": "let",
          "description": "Set the `href` to use an anchor link",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "isCurrentPage",
          "kind": "let",
          "description": "Set to `true` if the breadcrumb item represents the current page",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{props?: { [\"aria-current\"]?: string; class: \"bx--link\"; }}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "li" },
        { "type": "forwarded", "name": "mouseover", "element": "li" },
        { "type": "forwarded", "name": "mouseenter", "element": "li" },
        { "type": "forwarded", "name": "mouseleave", "element": "li" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "li" }
    },
    {
      "moduleName": "BreadcrumbSkeleton",
      "filePath": "src/Breadcrumb/BreadcrumbSkeleton.svelte",
      "props": [
        {
          "name": "noTrailingSlash",
          "kind": "let",
          "description": "Set to `true` to hide the breadcrumb trailing slash",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "count",
          "kind": "let",
          "description": "Specify the number of breadcrumb items to render",
          "type": "number",
          "value": "3",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Breakpoint",
      "filePath": "src/Breakpoint/Breakpoint.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Determine the current Carbon grid breakpoint size",
          "type": "BreakpointSize",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "sizes",
          "kind": "let",
          "description": "Carbon grid sizes as an object",
          "type": "Record<BreakpointSize, boolean>",
          "value": "{     sm: false,     md: false,     lg: false,     xlg: false,     max: false,   }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{ size: BreakpointSize; sizes: Record<BreakpointSize, boolean>; }"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "change",
          "detail": "{ size: BreakpointSize; breakpointValue: BreakpointValue; }"
        }
      ],
      "typedefs": [
        {
          "type": "\"sm\" | \"md\" | \"lg\" | \"xlg\" | \"max\"",
          "name": "BreakpointSize",
          "ts": "type BreakpointSize = \"sm\" | \"md\" | \"lg\" | \"xlg\" | \"max\""
        },
        {
          "type": "320 | 672 | 1056 | 1312 | 1584",
          "name": "BreakpointValue",
          "ts": "type BreakpointValue = 320 | 672 | 1056 | 1312 | 1584"
        }
      ]
    },
    {
      "moduleName": "Button",
      "filePath": "src/Button/Button.svelte",
      "props": [
        {
          "name": "kind",
          "kind": "let",
          "description": "Specify the kind of button",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\" | \"danger-tertiary\" | \"danger-ghost\"",
          "value": "\"primary\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of button",
          "type": "\"default\" | \"field\" | \"small\" | \"lg\" | \"xl\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expressive",
          "kind": "let",
          "description": "Set to `true` to use Carbon's expressive typesetting",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "isSelected",
          "kind": "let",
          "description": "Set to `true` to enable the selected state for an icon-only, ghost button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the button icon",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tooltipAlignment",
          "kind": "let",
          "description": "Set the alignment of the tooltip relative to the icon.\nOnly applies to icon-only buttons",
          "type": "\"start\" | \"center\" | \"end\"",
          "value": "\"center\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tooltipPosition",
          "kind": "let",
          "description": "Set the position of the tooltip relative to the icon",
          "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "as",
          "kind": "let",
          "description": "Set to `true` to render a custom HTML element\nProps are destructured as `props` in the default slot (e.g., <Button let:props><div {...props}>...</div></Button>)",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "skeleton",
          "kind": "let",
          "description": "Set to `true` to display the skeleton state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Set the `href` to use an anchor link",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Specify the `type` attribute for the button element",
          "type": "string",
          "value": "\"button\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML element",
          "type": "null | HTMLAnchorElement | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{ props: { role: \"button\"; type?: string; tabindex: any; disabled: boolean; href?: string; class: string; [key: string]: any; } }"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "ButtonSkeleton" },
        {
          "type": "forwarded",
          "name": "mouseover",
          "element": "ButtonSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseenter",
          "element": "ButtonSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseleave",
          "element": "ButtonSkeleton"
        }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button | a | div" },
      "extends": {
        "interface": "ButtonSkeletonProps",
        "import": "\"./ButtonSkeleton.svelte\""
      }
    },
    {
      "moduleName": "ButtonSet",
      "filePath": "src/Button/ButtonSet.svelte",
      "props": [
        {
          "name": "stacked",
          "kind": "let",
          "description": "Set to `true` to stack the buttons vertically",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ButtonSkeleton",
      "filePath": "src/Button/ButtonSkeleton.svelte",
      "props": [
        {
          "name": "href",
          "kind": "let",
          "description": "Set the `href` to use an anchor link",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of button skeleton",
          "type": "\"default\" | \"field\" | \"small\" | \"lg\" | \"xl\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "a" },
        { "type": "forwarded", "name": "mouseover", "element": "a" },
        { "type": "forwarded", "name": "mouseenter", "element": "a" },
        { "type": "forwarded", "name": "mouseleave", "element": "a" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "Checkbox",
      "filePath": "src/Checkbox/Checkbox.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the value of the checkbox",
          "type": "any",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "checked",
          "kind": "let",
          "description": "Specify whether the checkbox is checked",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "group",
          "kind": "let",
          "description": "Specify the bound group",
          "type": "ReadonlyArray<any>",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "indeterminate",
          "kind": "let",
          "description": "Specify whether the checkbox is indeterminate",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "skeleton",
          "kind": "let",
          "description": "Set to `true` to display the skeleton state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "required",
          "kind": "let",
          "description": "Set to `true` to mark the field as required",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "readonly",
          "kind": "let",
          "description": "Set to `true` for the checkbox to be read-only",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the checkbox",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Set a name for the input element",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title attribute for the label element",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input label",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "dispatched", "name": "check", "detail": "boolean" },
        { "type": "forwarded", "name": "click", "element": "CheckboxSkeleton" },
        {
          "type": "forwarded",
          "name": "mouseover",
          "element": "CheckboxSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseenter",
          "element": "CheckboxSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseleave",
          "element": "CheckboxSkeleton"
        },
        { "type": "forwarded", "name": "change", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "CheckboxSkeleton",
      "filePath": "src/Checkbox/CheckboxSkeleton.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ClickableTile",
      "filePath": "src/Tile/ClickableTile.svelte",
      "props": [
        {
          "name": "clicked",
          "kind": "let",
          "description": "Set to `true` to click the tile",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the tile",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Set the `href`",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "Link" },
        { "type": "forwarded", "name": "keydown", "element": "Link" },
        { "type": "forwarded", "name": "mouseover", "element": "Link" },
        { "type": "forwarded", "name": "mouseenter", "element": "Link" },
        { "type": "forwarded", "name": "mouseleave", "element": "Link" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a | p" }
    },
    {
      "moduleName": "CodeSnippet",
      "filePath": "src/CodeSnippet/CodeSnippet.svelte",
      "props": [
        {
          "name": "type",
          "kind": "let",
          "description": "Set the type of code snippet",
          "type": "\"single\" | \"inline\" | \"multi\"",
          "value": "\"single\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "code",
          "kind": "let",
          "description": "Set the code snippet text\nAlternatively, use the default slot (e.g., <CodeSnippet>{`code`}</CodeSnippet>)\nYou must use the `code` prop to copy the code",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "copy",
          "kind": "let",
          "description": "Override the default copy behavior of using the navigator.clipboard.writeText API to copy text",
          "type": "(code: string) => void",
          "value": "async (code) => {     try {       await navigator.clipboard.writeText(code);     } catch (e) {       console.log(e);     }   }",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expanded",
          "kind": "let",
          "description": "Set to `true` to expand a multi-line code snippet (type=\"multi\")",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "hideCopyButton",
          "kind": "let",
          "description": "Set to `true` to hide the copy button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` for the disabled variant\nOnly applies to the \"single\", \"multi\" types",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "wrapText",
          "kind": "let",
          "description": "Set to `true` to wrap the text\nNote that `type` must be \"multi\"",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "skeleton",
          "kind": "let",
          "description": "Set to `true` to display the skeleton state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "copyButtonDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the copy button icon",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "copyLabel",
          "kind": "let",
          "description": "Specify the ARIA label of the copy button",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "feedback",
          "kind": "let",
          "description": "Specify the feedback text displayed when clicking the snippet",
          "type": "string",
          "value": "\"Copied!\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "feedbackTimeout",
          "kind": "let",
          "description": "Set the timeout duration (ms) to display feedback text",
          "type": "number",
          "value": "2000",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "showLessText",
          "kind": "let",
          "description": "Specify the show less text\n`type` must be \"multi\"",
          "type": "string",
          "value": "\"Show less\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "showMoreText",
          "kind": "let",
          "description": "Specify the show more text\n`type` must be \"multi\"",
          "type": "string",
          "value": "\"Show more\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "showMoreLess",
          "kind": "let",
          "description": "Set to `true` to enable the show more/less button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the code element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the pre HTML element",
          "type": "null | HTMLPreElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{code}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "dispatched", "name": "expand", "detail": "null" },
        { "type": "dispatched", "name": "collapse", "detail": "null" },
        { "type": "dispatched", "name": "copy", "detail": "null" },
        {
          "type": "forwarded",
          "name": "click",
          "element": "CodeSnippetSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseover",
          "element": "CodeSnippetSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseenter",
          "element": "CodeSnippetSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseleave",
          "element": "CodeSnippetSkeleton"
        },
        { "type": "forwarded", "name": "animationend", "element": "CopyButton" }
      ],
      "typedefs": [],
      "rest_props": { "type": "InlineComponent", "name": "CodeSnippetSkeleton" }
    },
    {
      "moduleName": "CodeSnippetSkeleton",
      "filePath": "src/CodeSnippet/CodeSnippetSkeleton.svelte",
      "props": [
        {
          "name": "type",
          "kind": "let",
          "description": "Set the type of code snippet",
          "type": "\"single\" | \"multi\"",
          "value": "\"single\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Column",
      "filePath": "src/Grid/Column.svelte",
      "props": [
        {
          "name": "as",
          "kind": "let",
          "description": "Set to `true` to render a custom HTML element\nProps are destructured as `props` in the default slot (e.g., <Column let:props><article {...props}>...</article></Column>)",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutter",
          "kind": "let",
          "description": "Set to `true` to remove the gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutterLeft",
          "kind": "let",
          "description": "Set to `true` to remove the left gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutterRight",
          "kind": "let",
          "description": "Set to `true` to remove the right gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "padding",
          "kind": "let",
          "description": "Set to `true` to add top and bottom padding to the column",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "aspectRatio",
          "kind": "let",
          "description": "Specify the aspect ratio of the column",
          "type": "\"2x1\" | \"16x9\" | \"9x16\" | \"1x2\" | \"4x3\" | \"3x4\" | \"1x1\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "sm",
          "kind": "let",
          "description": "Set the small breakpoint",
          "type": "ColumnBreakpoint",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "md",
          "kind": "let",
          "description": "Set the medium breakpoint",
          "type": "ColumnBreakpoint",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "lg",
          "kind": "let",
          "description": "Set the large breakpoint",
          "type": "ColumnBreakpoint",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "xlg",
          "kind": "let",
          "description": "Set the extra large breakpoint",
          "type": "ColumnBreakpoint",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "max",
          "kind": "let",
          "description": "Set the maximum breakpoint",
          "type": "ColumnBreakpoint",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{props: { class: string; [key: string]: any; }}"
        }
      ],
      "events": [],
      "typedefs": [
        {
          "type": "boolean | number",
          "name": "ColumnSize",
          "ts": "type ColumnSize = boolean | number"
        },
        {
          "type": "{span?: ColumnSize; offset: number;}",
          "name": "ColumnSizeDescriptor",
          "ts": "interface ColumnSizeDescriptor {span?: ColumnSize; offset: number;}"
        },
        {
          "type": "ColumnSize | ColumnSizeDescriptor",
          "name": "ColumnBreakpoint",
          "ts": "type ColumnBreakpoint = ColumnSize | ColumnSizeDescriptor"
        }
      ],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ComboBox",
      "filePath": "src/ComboBox/ComboBox.svelte",
      "props": [
        {
          "name": "items",
          "kind": "let",
          "description": "Set the combobox items",
          "type": "ReadonlyArray<ComboBoxItem>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "itemToString",
          "kind": "let",
          "description": "Override the display of a combobox item",
          "type": "(item: ComboBoxItem) => string",
          "value": "(item) => item.text || item.id",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectedId",
          "kind": "let",
          "description": "Set the selected item by value id",
          "type": "ComboBoxItemId",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the selected combobox value",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "direction",
          "kind": "let",
          "description": "Specify the direction of the combobox dropdown menu",
          "type": "\"bottom\" | \"top\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the combobox",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the combobox",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "titleText",
          "kind": "let",
          "description": "Specify the title text of the combobox",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "placeholder",
          "kind": "let",
          "description": "Specify the placeholder text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the combobox menu dropdown",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "shouldFilterItem",
          "kind": "let",
          "description": "Determine if an item should be filtered given the current combobox value",
          "type": "(item: ComboBoxItem, value: string) => boolean",
          "value": "() => true",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translateWithId",
          "kind": "let",
          "description": "Override the chevron icon label based on the open state.\nDefaults to \"Open menu\" when closed and \"Close menu\" when open",
          "type": "(id: import(\"../ListBox/ListBoxMenuIcon.svelte\").ListBoxMenuIconTranslationId) => string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translateWithIdSelection",
          "kind": "let",
          "description": "Override the label of the clear button when the input has a selection.\nDefaults to \"Clear selected item\" since a combo box can only have on selection.",
          "type": "(id: \"clearSelection\") => string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the list box component",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "listRef",
          "kind": "let",
          "description": "Obtain a reference to the list HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "clear",
          "kind": "function",
          "description": "Clear the combo box programmatically",
          "type": "(options?: { focus?: boolean; }) => void",
          "value": "() => {     prevSelectedId = null;     highlightedIndex = -1;     highlightedId = undefined;     selectedId = undefined;     selectedItem = undefined;     open = false;     value = \"\";     if (options?.focus !== false) ref?.focus();   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{itemToString(item)}",
          "slot_props": "{ item: ComboBoxItem; index: number }"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "select",
          "detail": "{ selectedId: ComboBoxItemId; selectedItem: ComboBoxItem }"
        },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" },
        { "type": "forwarded", "name": "clear", "element": "ListBoxSelection" },
        { "type": "forwarded", "name": "scroll", "element": "ListBoxMenu" }
      ],
      "typedefs": [
        {
          "type": "any",
          "name": "ComboBoxItemId",
          "ts": "type ComboBoxItemId = any"
        },
        {
          "type": "{ id: ComboBoxItemId; text: string; disabled?: boolean; }",
          "name": "ComboBoxItem",
          "ts": "interface ComboBoxItem { id: ComboBoxItemId; text: string; disabled?: boolean; }"
        }
      ],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "ComposedModal",
      "filePath": "src/ComposedModal/ComposedModal.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the composed modal",
          "type": "\"xs\" | \"sm\" | \"lg\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the modal",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "danger",
          "kind": "let",
          "description": "Set to `true` to use the danger variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "preventCloseOnClickOutside",
          "kind": "let",
          "description": "Set to `true` to prevent the modal from closing when clicking outside",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "containerClass",
          "kind": "let",
          "description": "Specify a class for the inner modal",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectorPrimaryFocus",
          "kind": "let",
          "description": "Specify a selector to be focused when opening the modal",
          "type": "null | string",
          "value": "\"[data-modal-primary-focus]\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the top-level HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        {
          "type": "dispatched",
          "name": "transitionend",
          "detail": "{ open: boolean; }"
        },
        { "type": "forwarded", "name": "keydown", "element": "div" },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "dispatched", "name": "submit", "detail": "null" },
        {
          "type": "dispatched",
          "name": "click:button--primary",
          "detail": "null"
        },
        { "type": "dispatched", "name": "close", "detail": "null" },
        { "type": "dispatched", "name": "open", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Content",
      "filePath": "src/UIShell/Content.svelte",
      "props": [
        {
          "name": "id",
          "kind": "let",
          "description": "Specify the id for the main element",
          "type": "string",
          "value": "\"main-content\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "main" }
    },
    {
      "moduleName": "ContentSwitcher",
      "filePath": "src/ContentSwitcher/ContentSwitcher.svelte",
      "props": [
        {
          "name": "selectedIndex",
          "kind": "let",
          "description": "Set the selected index of the switch item",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the content switcher",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "dispatched", "name": "change", "detail": "number" },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ContextMenu",
      "filePath": "src/ContextMenu/ContextMenu.svelte",
      "props": [
        {
          "name": "target",
          "kind": "let",
          "description": "Specify an element or list of elements to trigger the context menu.\nIf no element is specified, the context menu applies to the entire window",
          "type": "null | ReadonlyArray<null | HTMLElement>",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the menu\nEither `x` and `y` must be greater than zero",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "x",
          "kind": "let",
          "description": "Specify the horizontal offset of the menu position",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "y",
          "kind": "let",
          "description": "Specify the vertical offset of the menu position",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the unordered list HTML element",
          "type": "null | HTMLUListElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "dispatched", "name": "open", "detail": "HTMLElement" },
        { "type": "forwarded", "name": "click", "element": "ul" },
        { "type": "forwarded", "name": "keydown", "element": "ul" },
        { "type": "dispatched", "name": "close", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "ul" }
    },
    {
      "moduleName": "ContextMenuDivider",
      "filePath": "src/ContextMenu/ContextMenuDivider.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "ContextMenuGroup",
      "filePath": "src/ContextMenu/ContextMenuGroup.svelte",
      "props": [
        {
          "name": "selectedIds",
          "kind": "let",
          "type": "ReadonlyArray<string>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "ContextMenuOption",
      "filePath": "src/ContextMenu/ContextMenuOption.svelte",
      "props": [
        {
          "name": "kind",
          "kind": "let",
          "description": "Specify the kind of option",
          "type": "\"default\" | \"danger\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to enable the disabled state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "indented",
          "kind": "let",
          "description": "Set to `true` to indent the label",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render\nIcon is rendered to the left of the label text",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text\nAlternatively, use the \"labelText\" slot (e.g., <span slot=\"labelText\">...</span>)",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selected",
          "kind": "let",
          "description": "Set to `true` to use the selected variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "selectable",
          "kind": "let",
          "description": "Set to `true` to enable the selectable variant\nAutomatically set to `true` if `selected` is `true`",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "shortcutText",
          "kind": "let",
          "description": "Specify the shortcut text\nAlternatively, use the \"shortcutText\" slot (e.g., <span slot=\"shortcutText\">...</span>)",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Specify the id\nIt's recommended to provide an id as a value to bind to within a selectable/radio menu group",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the list item HTML element",
          "type": "null | HTMLLIElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "icon",
          "default": false,
          "fallback": "<svelte:component this=\"{icon}\" />",
          "slot_props": "{}"
        },
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        },
        {
          "name": "shortcutText",
          "default": false,
          "fallback": "{shortcutText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "keydown", "element": "li" },
        { "type": "forwarded", "name": "mouseenter", "element": "li" },
        { "type": "forwarded", "name": "mouseleave", "element": "li" },
        { "type": "dispatched", "name": "click", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "li" }
    },
    {
      "moduleName": "ContextMenuRadioGroup",
      "filePath": "src/ContextMenu/ContextMenuRadioGroup.svelte",
      "props": [
        {
          "name": "selectedId",
          "kind": "let",
          "description": "Set the selected radio group id",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "CopyButton",
      "filePath": "src/CopyButton/CopyButton.svelte",
      "props": [
        {
          "name": "feedback",
          "kind": "let",
          "description": "Set the feedback text shown after clicking the button",
          "type": "string",
          "value": "\"Copied!\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "feedbackTimeout",
          "kind": "let",
          "description": "Set the timeout duration (ms) to display feedback text",
          "type": "number",
          "value": "2000",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Set the title and ARIA label for the copy button",
          "type": "string",
          "value": "\"Copy to clipboard\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the text to copy",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": true,
          "constant": false,
          "reactive": false
        },
        {
          "name": "copy",
          "kind": "let",
          "description": "Override the default copy behavior of using the navigator.clipboard.writeText API to copy text",
          "type": "(text: string) => void",
          "value": "async (text) => {     try {       await navigator.clipboard.writeText(text);     } catch (e) {       console.log(e);     }   }",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "animationend", "element": "button" },
        { "type": "dispatched", "name": "copy", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "DataTable",
      "filePath": "src/DataTable/DataTable.svelte",
      "props": [
        {
          "name": "headers",
          "kind": "let",
          "description": "Specify the data table headers",
          "type": "ReadonlyArray<DataTableHeader>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "rows",
          "kind": "let",
          "description": "Specify the rows the data table should render\nkeys defined in `headers` are used for the row ids",
          "type": "ReadonlyArray<DataTableRow>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the data table",
          "type": "\"compact\" | \"short\" | \"medium\" | \"tall\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title of the data table",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "description",
          "kind": "let",
          "description": "Specify the description of the data table",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "zebra",
          "kind": "let",
          "description": "Set to `true` to use zebra styles",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "sortable",
          "kind": "let",
          "description": "Set to `true` for the sortable variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "sortKey",
          "kind": "let",
          "description": "Specify the header key to sort by",
          "type": "DataTableKey",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "sortDirection",
          "kind": "let",
          "description": "Specify the sort direction",
          "type": "\"none\" | \"ascending\" | \"descending\"",
          "value": "\"none\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "expandable",
          "kind": "let",
          "description": "Set to `true` for the expandable variant\nAutomatically set to `true` if `batchExpansion` is `true`",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "batchExpansion",
          "kind": "let",
          "description": "Set to `true` to enable batch expansion",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expandedRowIds",
          "kind": "let",
          "description": "Specify the row ids to be expanded",
          "type": "ReadonlyArray<DataTableRowId>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "nonExpandableRowIds",
          "kind": "let",
          "description": "Specify the ids for rows that should not be expandable",
          "type": "ReadonlyArray<DataTableRowId>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "radio",
          "kind": "let",
          "description": "Set to `true` for the radio selection variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectable",
          "kind": "let",
          "description": "Set to `true` for the selectable variant\nAutomatically set to `true` if `radio` or `batchSelection` are `true`",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "batchSelection",
          "kind": "let",
          "description": "Set to `true` to enable batch selection",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectedRowIds",
          "kind": "let",
          "description": "Specify the row ids to be selected",
          "type": "ReadonlyArray<DataTableRowId>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "nonSelectableRowIds",
          "kind": "let",
          "description": "Specify the ids of rows that should not be selectable",
          "type": "ReadonlyArray<DataTableRowId>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "stickyHeader",
          "kind": "let",
          "description": "Set to `true` to enable a sticky header",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "useStaticWidth",
          "kind": "let",
          "description": "Set to `true` to use static width",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pageSize",
          "kind": "let",
          "description": "Specify the number of items to display in a page",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "page",
          "kind": "let",
          "description": "Set to `number` to set current page",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "cell",
          "default": false,
          "fallback": "{cell.display ? cell.display(cell.value) : cell.value}",
          "slot_props": "{ row: DataTableRow; cell: DataTableCell; rowIndex: number; cellIndex: number; }"
        },
        {
          "name": "cell-header",
          "default": false,
          "fallback": "{header.value}",
          "slot_props": "{ header: DataTableNonEmptyHeader; }"
        },
        {
          "name": "description",
          "default": false,
          "fallback": "{description}",
          "slot_props": "{}"
        },
        {
          "name": "expanded-row",
          "default": false,
          "slot_props": "{ row: DataTableRow; }"
        },
        {
          "name": "title",
          "default": false,
          "fallback": "{title}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "click",
          "detail": "{ header?: DataTableHeader; row?: DataTableRow; cell?: DataTableCell; }"
        },
        {
          "type": "dispatched",
          "name": "click:header--expand",
          "detail": "{ expanded: boolean; }"
        },
        {
          "type": "dispatched",
          "name": "click:header",
          "detail": "{ header: DataTableHeader; sortDirection?: \"ascending\" | \"descending\" | \"none\" }"
        },
        {
          "type": "dispatched",
          "name": "click:header--select",
          "detail": "{ indeterminate: boolean; selected: boolean; }"
        },
        { "type": "dispatched", "name": "click:row", "detail": "DataTableRow" },
        {
          "type": "dispatched",
          "name": "mouseenter:row",
          "detail": "DataTableRow"
        },
        {
          "type": "dispatched",
          "name": "mouseleave:row",
          "detail": "DataTableRow"
        },
        {
          "type": "dispatched",
          "name": "click:row--expand",
          "detail": "{ expanded: boolean; row: DataTableRow; }"
        },
        {
          "type": "dispatched",
          "name": "click:row--select",
          "detail": "{ selected: boolean; row: DataTableRow; }"
        },
        {
          "type": "dispatched",
          "name": "click:cell",
          "detail": "DataTableCell"
        }
      ],
      "typedefs": [
        {
          "type": "string",
          "name": "DataTableKey",
          "ts": "type DataTableKey = string"
        },
        {
          "type": "any",
          "name": "DataTableValue",
          "ts": "type DataTableValue = any"
        },
        {
          "type": "{ key: DataTableKey; empty: boolean; display?: (item: Value) => DataTableValue; sort?: false | ((a: DataTableValue, b: DataTableValue) => (0 | -1 | 1)); columnMenu?: boolean; width?: string; minWidth?: string; }",
          "name": "DataTableEmptyHeader",
          "ts": "interface DataTableEmptyHeader { key: DataTableKey; empty: boolean; display?: (item: Value) => DataTableValue; sort?: false | ((a: DataTableValue, b: DataTableValue) => (0 | -1 | 1)); columnMenu?: boolean; width?: string; minWidth?: string; }"
        },
        {
          "type": "{ key: DataTableKey; value: DataTableValue; display?: (item: Value) => DataTableValue; sort?: false | ((a: DataTableValue, b: DataTableValue) => (0 | -1 | 1)); columnMenu?: boolean; width?: string; minWidth?: string; }",
          "name": "DataTableNonEmptyHeader",
          "ts": "interface DataTableNonEmptyHeader { key: DataTableKey; value: DataTableValue; display?: (item: Value) => DataTableValue; sort?: false | ((a: DataTableValue, b: DataTableValue) => (0 | -1 | 1)); columnMenu?: boolean; width?: string; minWidth?: string; }"
        },
        {
          "type": "DataTableNonEmptyHeader | DataTableEmptyHeader",
          "name": "DataTableHeader",
          "ts": "type DataTableHeader = DataTableNonEmptyHeader | DataTableEmptyHeader"
        },
        {
          "type": "{ id: any; [key: string]: DataTableValue; }",
          "name": "DataTableRow",
          "ts": "interface DataTableRow { id: any; [key: string]: DataTableValue; }"
        },
        {
          "type": "any",
          "name": "DataTableRowId",
          "ts": "type DataTableRowId = any"
        },
        {
          "type": "{ key: DataTableKey; value: DataTableValue; display?: (item: Value) => DataTableValue; }",
          "name": "DataTableCell",
          "ts": "interface DataTableCell { key: DataTableKey; value: DataTableValue; display?: (item: Value) => DataTableValue; }"
        }
      ],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "DataTableSkeleton",
      "filePath": "src/DataTable/DataTableSkeleton.svelte",
      "props": [
        {
          "name": "columns",
          "kind": "let",
          "description": "Specify the number of columns\nSuperseded by `headers` if `headers` is a non-empty array",
          "type": "number",
          "value": "5",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "rows",
          "kind": "let",
          "description": "Specify the number of rows",
          "type": "number",
          "value": "5",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the data table",
          "type": "\"compact\" | \"short\" | \"tall\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "zebra",
          "kind": "let",
          "description": "Set to `true` to apply zebra styles to the datatable rows",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "showHeader",
          "kind": "let",
          "description": "Set to `false` to hide the header",
          "type": "boolean",
          "value": "true",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "headers",
          "kind": "let",
          "description": "Set the column headers\nSupersedes `columns` if value is a non-empty array",
          "type": "ReadonlyArray<string | Partial<DataTableHeader>>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "showToolbar",
          "kind": "let",
          "description": "Set to `false` to hide the toolbar",
          "type": "boolean",
          "value": "true",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "table" },
        { "type": "forwarded", "name": "mouseover", "element": "table" },
        { "type": "forwarded", "name": "mouseenter", "element": "table" },
        { "type": "forwarded", "name": "mouseleave", "element": "table" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" },
      "extends": {
        "interface": "DataTableHeader",
        "import": "\"./DataTable.svelte\""
      }
    },
    {
      "moduleName": "DatePicker",
      "filePath": "src/DatePicker/DatePicker.svelte",
      "props": [
        {
          "name": "datePickerType",
          "kind": "let",
          "description": "Specify the date picker type",
          "type": "\"simple\" | \"single\" | \"range\"",
          "value": "\"simple\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the date picker input value",
          "type": "number | string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "valueFrom",
          "kind": "let",
          "description": "Specify the date picker start date value (from)\nOnly works with the \"range\" date picker type",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "valueTo",
          "kind": "let",
          "description": "Specify the date picker end date value (to)\nOnly works with the \"range\" date picker type",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "dateFormat",
          "kind": "let",
          "description": "Specify the date format",
          "type": "string",
          "value": "\"m/d/Y\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "maxDate",
          "kind": "let",
          "description": "Specify the maximum date",
          "type": "null | string | Date",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "minDate",
          "kind": "let",
          "description": "Specify the minimum date",
          "type": "null | string | Date",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "locale",
          "kind": "let",
          "description": "Specify the locale",
          "type": "import(\"flatpickr/dist/types/locale\").CustomLocale | import(\"flatpickr/dist/types/locale\").key",
          "value": "\"en\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "short",
          "kind": "let",
          "description": "Set to `true` to use the short variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the date picker element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "flatpickrProps",
          "kind": "let",
          "description": "Override the options passed to the Flatpickr instance.\n@see https://flatpickr.js.org/options",
          "type": "import(\"flatpickr/dist/types/options\").Options",
          "value": "{ static: true }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        {
          "type": "dispatched",
          "name": "change",
          "detail": "string | { selectedDates: [dateFrom: Date, dateTo?: Date]; dateStr: string | { from: string; to: string; } }"
        },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "DatePickerInput",
      "filePath": "src/DatePicker/DatePickerInput.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the input",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Specify the input type",
          "type": "string",
          "value": "\"text\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "placeholder",
          "kind": "let",
          "description": "Specify the input placeholder text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pattern",
          "kind": "let",
          "description": "Specify the Regular Expression for the input value",
          "type": "string",
          "value": "\"\\\\d{1,2}\\\\/\\\\d{1,2}\\\\/\\\\d{4}\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the calendar icon",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Set a name for the input element",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "input", "element": "input" },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "DatePickerSkeleton",
      "filePath": "src/DatePicker/DatePickerSkeleton.svelte",
      "props": [
        {
          "name": "range",
          "kind": "let",
          "description": "Set to `true` to use the range variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id to be used by the label element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Dropdown",
      "filePath": "src/Dropdown/Dropdown.svelte",
      "props": [
        {
          "name": "items",
          "kind": "let",
          "description": "Set the dropdown items",
          "type": "ReadonlyArray<DropdownItem>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "itemToString",
          "kind": "let",
          "description": "Override the display of a dropdown item",
          "type": "(item: DropdownItem) => string",
          "value": "(item) => item.text || item.id",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectedId",
          "kind": "let",
          "description": "Specify the selected item id",
          "type": "DropdownItemId",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": true,
          "constant": false,
          "reactive": true
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Specify the type of dropdown",
          "type": "\"default\" | \"inline\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "direction",
          "kind": "let",
          "description": "Specify the direction of the dropdown menu",
          "type": "\"bottom\" | \"top\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the dropdown field",
          "type": "\"sm\" | \"lg\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the dropdown",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the dropdown",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "titleText",
          "kind": "let",
          "description": "Specify the title text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "label",
          "kind": "let",
          "description": "Specify the list box label",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translateWithId",
          "kind": "let",
          "description": "Override the chevron icon label based on the open state.\nDefaults to \"Open menu\" when closed and \"Close menu\" when open",
          "type": "(id: import(\"../ListBox/ListBoxMenuIcon.svelte\").ListBoxMenuIconTranslationId) => string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the list box component",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the list box",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the button HTML element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{itemToString(item)}",
          "slot_props": "{ item: DropdownItem; index: number; }"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "select",
          "detail": "{ selectedId: DropdownItemId, selectedItem: DropdownItem }"
        }
      ],
      "typedefs": [
        {
          "type": "any",
          "name": "DropdownItemId",
          "ts": "type DropdownItemId = any"
        },
        {
          "type": "string",
          "name": "DropdownItemText",
          "ts": "type DropdownItemText = string"
        },
        {
          "type": "{ id: DropdownItemId; text: DropdownItemText; disabled?: boolean; }",
          "name": "DropdownItem",
          "ts": "interface DropdownItem { id: DropdownItemId; text: DropdownItemText; disabled?: boolean; }"
        }
      ],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "DropdownSkeleton",
      "filePath": "src/Dropdown/DropdownSkeleton.svelte",
      "props": [
        {
          "name": "inline",
          "kind": "let",
          "description": "Set to `true` to use the inline variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ExpandableTile",
      "filePath": "src/Tile/ExpandableTile.svelte",
      "props": [
        {
          "name": "expanded",
          "kind": "let",
          "description": "Set to `true` to expand the tile",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tileMaxHeight",
          "kind": "let",
          "description": "Specify the max height of the tile  (number of pixels)",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "tilePadding",
          "kind": "let",
          "description": "Specify the padding of the tile (number of pixels)",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "tileCollapsedIconText",
          "kind": "let",
          "description": "Specify the icon text of the collapsed tile",
          "type": "string",
          "value": "\"Interact to expand Tile\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tileExpandedIconText",
          "kind": "let",
          "description": "Specify the icon text of the expanded tile",
          "type": "string",
          "value": "\"Interact to collapse Tile\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tileExpandedLabel",
          "kind": "let",
          "description": "Specify the icon label of the expanded tile",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tileCollapsedLabel",
          "kind": "let",
          "description": "Specify the icon label of the collapsed tile",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level div element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the top-level element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "above", "default": false, "slot_props": "{}" },
        { "name": "below", "default": false, "slot_props": "{}" }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "keypress", "element": "button" },
        { "type": "forwarded", "name": "mouseover", "element": "button" },
        { "type": "forwarded", "name": "mouseenter", "element": "button" },
        { "type": "forwarded", "name": "mouseleave", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "FileUploader",
      "filePath": "src/FileUploader/FileUploader.svelte",
      "props": [
        {
          "name": "status",
          "kind": "let",
          "description": "Specify the file uploader status",
          "type": "\"uploading\" | \"edit\" | \"complete\"",
          "value": "\"uploading\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the file uploader",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "accept",
          "kind": "let",
          "description": "Specify the accepted file types",
          "type": "ReadonlyArray<string>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "files",
          "kind": "let",
          "description": "Obtain a reference to the uploaded files",
          "type": "ReadonlyArray<File>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "multiple",
          "kind": "let",
          "description": "Set to `true` to allow multiple files",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "clearFiles",
          "kind": "const",
          "description": "Programmatically clear the uploaded files",
          "type": "() => void",
          "value": "() => {     files = [];   }",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": true,
          "reactive": false
        },
        {
          "name": "labelDescription",
          "kind": "let",
          "description": "Specify the label description",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelTitle",
          "kind": "let",
          "description": "Specify the label title",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "kind",
          "kind": "let",
          "description": "Specify the kind of file uploader button",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\"",
          "value": "\"primary\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "buttonLabel",
          "kind": "let",
          "description": "Specify the button label",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label used for the status icons",
          "type": "string",
          "value": "\"Provide icon description\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the file button uploader input",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        {
          "type": "dispatched",
          "name": "add",
          "detail": "ReadonlyArray<File>"
        },
        {
          "type": "dispatched",
          "name": "remove",
          "detail": "ReadonlyArray<File>"
        },
        {
          "type": "dispatched",
          "name": "change",
          "detail": "ReadonlyArray<File>"
        },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "forwarded", "name": "keydown", "element": "Filename" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "FileUploaderButton",
      "filePath": "src/FileUploader/FileUploaderButton.svelte",
      "props": [
        {
          "name": "accept",
          "kind": "let",
          "description": "Specify the accepted file types",
          "type": "ReadonlyArray<string>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "files",
          "kind": "let",
          "description": "Obtain a reference to the uploaded files",
          "type": "ReadonlyArray<File>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "multiple",
          "kind": "let",
          "description": "Set to `true` to allow multiple files",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disableLabelChanges",
          "kind": "let",
          "description": "Set to `true` to disable label changes",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "kind",
          "kind": "let",
          "description": "Specify the kind of file uploader button",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\"",
          "value": "\"primary\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"Add file\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "role",
          "kind": "let",
          "description": "Specify the label role",
          "type": "string",
          "value": "\"button\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify `tabindex` attribute",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "change",
          "detail": "ReadonlyArray<File>"
        },
        { "type": "forwarded", "name": "keydown", "element": "label" },
        { "type": "forwarded", "name": "click", "element": "input" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "FileUploaderDropContainer",
      "filePath": "src/FileUploader/FileUploaderDropContainer.svelte",
      "props": [
        {
          "name": "accept",
          "kind": "let",
          "description": "Specify the accepted file types",
          "type": "ReadonlyArray<string>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "files",
          "kind": "let",
          "description": "Obtain a reference to the uploaded files",
          "type": "ReadonlyArray<File>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "multiple",
          "kind": "let",
          "description": "Set to `true` to allow multiple files",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "validateFiles",
          "kind": "let",
          "description": "Override the default behavior of validating uploaded files.\nBy default, files are not validated",
          "type": "(files: ReadonlyArray<File>) => ReadonlyArray<File>",
          "value": "(files) => files",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"Add file\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "role",
          "kind": "let",
          "description": "Specify the `role` attribute of the drop container",
          "type": "string",
          "value": "\"button\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify `tabindex` attribute",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "add",
          "detail": "ReadonlyArray<File>"
        },
        {
          "type": "dispatched",
          "name": "change",
          "detail": "ReadonlyArray<File>"
        },
        { "type": "forwarded", "name": "dragover", "element": "div" },
        { "type": "forwarded", "name": "dragleave", "element": "div" },
        { "type": "forwarded", "name": "drop", "element": "div" },
        { "type": "forwarded", "name": "keydown", "element": "label" },
        { "type": "forwarded", "name": "click", "element": "input" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "FileUploaderItem",
      "filePath": "src/FileUploader/FileUploaderItem.svelte",
      "props": [
        {
          "name": "status",
          "kind": "let",
          "description": "Specify the file uploader status",
          "type": "\"uploading\" | \"edit\" | \"complete\"",
          "value": "\"uploading\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of button skeleton",
          "type": "\"default\" | \"field\" | \"small\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label used for the status icons",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "errorSubject",
          "kind": "let",
          "description": "Specify the error subject text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "errorBody",
          "kind": "let",
          "description": "Specify the error body text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify the file uploader name",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "dispatched", "name": "delete", "detail": "string" },
        { "type": "forwarded", "name": "mouseover", "element": "span" },
        { "type": "forwarded", "name": "mouseenter", "element": "span" },
        { "type": "forwarded", "name": "mouseleave", "element": "span" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "span" }
    },
    {
      "moduleName": "FileUploaderSkeleton",
      "filePath": "src/FileUploader/FileUploaderSkeleton.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Filename",
      "filePath": "src/FileUploader/Filename.svelte",
      "props": [
        {
          "name": "status",
          "kind": "let",
          "description": "Specify the file name status",
          "type": "\"uploading\" | \"edit\" | \"complete\"",
          "value": "\"uploading\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label used for the status icons",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "keydown", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div | button | svg" }
    },
    {
      "moduleName": "FluidForm",
      "filePath": "src/FluidForm/FluidForm.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "Form" },
        { "type": "forwarded", "name": "keydown", "element": "Form" },
        { "type": "forwarded", "name": "mouseover", "element": "Form" },
        { "type": "forwarded", "name": "mouseenter", "element": "Form" },
        { "type": "forwarded", "name": "mouseleave", "element": "Form" },
        { "type": "forwarded", "name": "submit", "element": "Form" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "form" }
    },
    {
      "moduleName": "Form",
      "filePath": "src/Form/Form.svelte",
      "props": [
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the form element",
          "type": "null | HTMLFormElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "form" },
        { "type": "forwarded", "name": "keydown", "element": "form" },
        { "type": "forwarded", "name": "mouseover", "element": "form" },
        { "type": "forwarded", "name": "mouseenter", "element": "form" },
        { "type": "forwarded", "name": "mouseleave", "element": "form" },
        { "type": "forwarded", "name": "submit", "element": "form" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "form" }
    },
    {
      "moduleName": "FormGroup",
      "filePath": "src/FormGroup/FormGroup.svelte",
      "props": [
        {
          "name": "noMargin",
          "kind": "let",
          "description": "Set to `true` for to remove the bottom margin",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "message",
          "kind": "let",
          "description": "Set to `true` to render a form requirement",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "messageText",
          "kind": "let",
          "description": "Specify the message text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "legendText",
          "kind": "let",
          "description": "Specify the legend text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "legendId",
          "kind": "let",
          "description": "Specify an id for the legend element",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "fieldset" },
        { "type": "forwarded", "name": "mouseover", "element": "fieldset" },
        { "type": "forwarded", "name": "mouseenter", "element": "fieldset" },
        { "type": "forwarded", "name": "mouseleave", "element": "fieldset" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "fieldset" }
    },
    {
      "moduleName": "FormItem",
      "filePath": "src/FormItem/FormItem.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "FormLabel",
      "filePath": "src/FormLabel/FormLabel.svelte",
      "props": [
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id to be used by the label element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "label" },
        { "type": "forwarded", "name": "mouseover", "element": "label" },
        { "type": "forwarded", "name": "mouseenter", "element": "label" },
        { "type": "forwarded", "name": "mouseleave", "element": "label" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "label" }
    },
    {
      "moduleName": "Grid",
      "filePath": "src/Grid/Grid.svelte",
      "props": [
        {
          "name": "as",
          "kind": "let",
          "description": "Set to `true` to render a custom HTML element\nProps are destructured as `props` in the default slot (e.g., <Grid let:props><header {...props}>...</header></Grid>)",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "condensed",
          "kind": "let",
          "description": "Set to `true` to use the condensed variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "narrow",
          "kind": "let",
          "description": "Set to `true` to use the narrow variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "fullWidth",
          "kind": "let",
          "description": "Set to `true` to use the fullWidth variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutter",
          "kind": "let",
          "description": "Set to `true` to remove the gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutterLeft",
          "kind": "let",
          "description": "Set to `true` to remove the left gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutterRight",
          "kind": "let",
          "description": "Set to `true` to remove the right gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "padding",
          "kind": "let",
          "description": "Set to `true` to add top and bottom padding to all columns",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{ props: { class: string; [key: string]: any; } }"
        }
      ],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Header",
      "filePath": "src/UIShell/Header.svelte",
      "props": [
        {
          "name": "expandedByDefault",
          "kind": "let",
          "description": "Set to `false` to hide the side nav by default",
          "type": "boolean",
          "value": "true",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "isSideNavOpen",
          "kind": "let",
          "description": "Set to `true` to open the side nav",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "uiShellAriaLabel",
          "kind": "let",
          "description": "Specify the ARIA label for the header",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "company",
          "kind": "let",
          "description": "Specify the company name",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "platformName",
          "kind": "let",
          "description": "Specify the platform name\nAlternatively, use the named slot \"platform\" (e.g., <span slot=\"platform\">...</span>)",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "persistentHamburgerMenu",
          "kind": "let",
          "description": "Set to `true` to persist the hamburger menu",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expansionBreakpoint",
          "kind": "let",
          "description": "The window width (px) at which the SideNav is expanded and the hamburger menu is hidden\n1056 represents the \"large\" breakpoint in pixels from the Carbon Design System:\nsmall: 320\nmedium: 672\nlarge: 1056\nx-large: 1312\nmax: 1584",
          "type": "number",
          "value": "1056",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML anchor element",
          "type": "null | HTMLAnchorElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "iconMenu",
          "kind": "let",
          "description": "Specify the icon to render for the closed state.\nDefaults to `<Menu size={20} />`",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconClose",
          "kind": "let",
          "description": "Specify the icon to render for the opened state.\nDefaults to `<Close size={20} />`",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "platform",
          "default": false,
          "fallback": "{platformName}",
          "slot_props": "{}"
        },
        { "name": "skip-to-content", "default": false, "slot_props": "{}" }
      ],
      "events": [{ "type": "forwarded", "name": "click", "element": "a" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "HeaderAction",
      "filePath": "src/UIShell/HeaderAction.svelte",
      "props": [
        {
          "name": "isOpen",
          "kind": "let",
          "description": "Set to `true` to open the panel",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render when the action panel is closed.\nDefaults to `<Switcher size={20} />`",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "closeIcon",
          "kind": "let",
          "description": "Specify the icon to render when the action panel is open.\nDefaults to `<Close size={20} />`",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the text\nAlternatively, use the named slot \"text\" (e.g., <div slot=\"text\">...</div>)",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the button HTML element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "transition",
          "kind": "let",
          "description": "Customize the panel transition (i.e., `transition:slide`).\nSet to `false` to disable the transition",
          "type": "false | import(\"svelte/transition\").SlideParams",
          "value": "{ duration: 200 }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "closeIcon",
          "default": false,
          "fallback": "<svelte:component this=\"{closeIcon}\" size=\"{20}\" />",
          "slot_props": "{}"
        },
        {
          "name": "icon",
          "default": false,
          "fallback": "<svelte:component this=\"{icon}\" size=\"{20}\" />",
          "slot_props": "{}"
        },
        {
          "name": "text",
          "default": false,
          "fallback": "{#if text}<span>{text}</span>{/if}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "dispatched", "name": "open", "detail": "null" },
        { "type": "dispatched", "name": "close", "detail": "null" },
        { "type": "forwarded", "name": "click", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "HeaderActionLink",
      "filePath": "src/UIShell/HeaderActionLink.svelte",
      "props": [
        {
          "name": "linkIsActive",
          "kind": "let",
          "description": "Set to `true` to use the active state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML anchor element",
          "type": "null | HTMLAnchorElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "icon",
          "default": false,
          "fallback": "<svelte:component this=\"{icon}\" size=\"{20}\" />",
          "slot_props": "{}"
        }
      ],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "HeaderGlobalAction",
      "filePath": "src/UIShell/HeaderGlobalAction.svelte",
      "props": [
        {
          "name": "isActive",
          "kind": "let",
          "description": "Set to `true` to use the active variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML button element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "<svelte:component this=\"{icon}\" size=\"{20}\" />",
          "slot_props": "{}"
        }
      ],
      "events": [{ "type": "forwarded", "name": "click", "element": "button" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "HeaderNav",
      "filePath": "src/UIShell/HeaderNav.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "nav" }
    },
    {
      "moduleName": "HeaderNavItem",
      "filePath": "src/UIShell/HeaderNavItem.svelte",
      "props": [
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the text",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "isSelected",
          "kind": "let",
          "description": "Set to `true` to select the item",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML anchor element",
          "type": "null | HTMLAnchorElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "a" },
        { "type": "forwarded", "name": "mouseover", "element": "a" },
        { "type": "forwarded", "name": "mouseenter", "element": "a" },
        { "type": "forwarded", "name": "mouseleave", "element": "a" },
        { "type": "forwarded", "name": "keyup", "element": "a" },
        { "type": "forwarded", "name": "keydown", "element": "a" },
        { "type": "forwarded", "name": "focus", "element": "a" },
        { "type": "forwarded", "name": "blur", "element": "a" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "HeaderNavMenu",
      "filePath": "src/UIShell/HeaderNavMenu.svelte",
      "props": [
        {
          "name": "expanded",
          "kind": "let",
          "description": "Set to `true` to toggle the expanded state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute",
          "type": "string",
          "value": "\"/\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the text",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML anchor element",
          "type": "null | HTMLAnchorElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "keydown", "element": "a" },
        { "type": "forwarded", "name": "click", "element": "a" },
        { "type": "forwarded", "name": "mouseover", "element": "a" },
        { "type": "forwarded", "name": "mouseenter", "element": "a" },
        { "type": "forwarded", "name": "mouseleave", "element": "a" },
        { "type": "forwarded", "name": "keyup", "element": "a" },
        { "type": "forwarded", "name": "focus", "element": "a" },
        { "type": "forwarded", "name": "blur", "element": "a" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "HeaderPanelDivider",
      "filePath": "src/UIShell/HeaderPanelDivider.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "HeaderPanelLink",
      "filePath": "src/UIShell/HeaderPanelLink.svelte",
      "props": [
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML anchor element",
          "type": "null | HTMLAnchorElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [{ "type": "forwarded", "name": "click", "element": "a" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "HeaderPanelLinks",
      "filePath": "src/UIShell/HeaderPanelLinks.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "HeaderSearch",
      "filePath": "src/UIShell/HeaderSearch.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the search input value",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "active",
          "kind": "let",
          "description": "Set to `true` to activate and focus the search bar",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "results",
          "kind": "let",
          "description": "Render a list of search results",
          "type": "ReadonlyArray<HeaderSearchResult>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectedResultIndex",
          "kind": "let",
          "description": "Specify the selected result index",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{result.text}\n              {#if result.description}<span>– {result.description}</span>{/if}",
          "slot_props": "{ result: HeaderSearchResult; index: number }"
        }
      ],
      "events": [
        { "type": "dispatched", "name": "active", "detail": "null" },
        { "type": "dispatched", "name": "inactive", "detail": "null" },
        { "type": "dispatched", "name": "clear", "detail": "null" },
        {
          "type": "dispatched",
          "name": "select",
          "detail": "{ value: string; selectedResultIndex: number; selectedResult: HeaderSearchResult }"
        },
        { "type": "forwarded", "name": "change", "element": "input" },
        { "type": "forwarded", "name": "input", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" }
      ],
      "typedefs": [
        {
          "type": "{ href: string; text: string; description?: string; }",
          "name": "HeaderSearchResult",
          "ts": "interface HeaderSearchResult { href: string; text: string; description?: string; }"
        }
      ],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "HeaderUtilities",
      "filePath": "src/UIShell/HeaderUtilities.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "ImageLoader",
      "filePath": "src/ImageLoader/ImageLoader.svelte",
      "props": [
        {
          "name": "src",
          "kind": "let",
          "description": "Specify the image source",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "alt",
          "kind": "let",
          "description": "Specify the image alt text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ratio",
          "kind": "let",
          "description": "Specify the aspect ratio for the image wrapper",
          "type": "\"2x1\" | \"16x9\" | \"4x3\" | \"1x1\" | \"3x4\" | \"3x2\" | \"9x16\" | \"1x2\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "loading",
          "kind": "let",
          "description": "Set to `true` when `loaded` is `true` and `error` is false",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "loaded",
          "kind": "let",
          "description": "Set to `true` when the image is loaded",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "error",
          "kind": "let",
          "description": "Set to `true` if an error occurs when loading the image",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "fadeIn",
          "kind": "let",
          "description": "Set to `true` to fade in the image on load\nThe duration uses the `fast-02` value following Carbon guidelines on motion",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "loadImage",
          "kind": "const",
          "description": "Method invoked to load the image provided a `src` value",
          "type": "(url?: string) => void",
          "value": "(url) => {     if (image != null) image = null;     loaded = false;     error = false;     image = new Image();     image.src = url || src;     image.onload = () => (loaded = true);     image.onerror = () => (error = true);   }",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": true,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "error", "default": false, "slot_props": "{}" },
        { "name": "loading", "default": false, "slot_props": "{}" }
      ],
      "events": [
        { "type": "dispatched", "name": "load", "detail": "null" },
        { "type": "dispatched", "name": "error", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "img" }
    },
    {
      "moduleName": "InlineLoading",
      "filePath": "src/InlineLoading/InlineLoading.svelte",
      "props": [
        {
          "name": "status",
          "kind": "let",
          "description": "Set the loading status",
          "type": "\"active\" | \"inactive\" | \"finished\" | \"error\"",
          "value": "\"active\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "description",
          "kind": "let",
          "description": "Set the loading description",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the loading icon",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "successDelay",
          "kind": "let",
          "description": "Specify the timeout delay (ms) after `status` is set to \"success\"",
          "type": "number",
          "value": "1500",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "dispatched", "name": "success", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "InlineNotification",
      "filePath": "src/Notification/InlineNotification.svelte",
      "props": [
        {
          "name": "kind",
          "kind": "let",
          "description": "Specify the kind of notification",
          "type": "\"error\" | \"info\" | \"info-square\" | \"success\" | \"warning\" | \"warning-alt\"",
          "value": "\"error\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "lowContrast",
          "kind": "let",
          "description": "Set to `true` to use the low contrast variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "timeout",
          "kind": "let",
          "description": "Set the timeout duration (ms) to hide the notification after opening it",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "role",
          "kind": "let",
          "description": "Set the `role` attribute",
          "type": "string",
          "value": "\"alert\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "subtitle",
          "kind": "let",
          "description": "Specify the subtitle text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideCloseButton",
          "kind": "let",
          "description": "Set to `true` to hide the close button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "statusIconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the status icon",
          "type": "string",
          "value": "kind + \" icon\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "closeButtonDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the close button",
          "type": "string",
          "value": "\"Close notification\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        { "name": "actions", "default": false, "slot_props": "{}" },
        {
          "name": "subtitle",
          "default": false,
          "fallback": "{subtitle}",
          "slot_props": "{}"
        },
        {
          "name": "title",
          "default": false,
          "fallback": "{title}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "close",
          "detail": "{ timeout: boolean }"
        },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Link",
      "filePath": "src/Link/Link.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the link",
          "type": "\"sm\" | \"lg\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the href value",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "inline",
          "kind": "let",
          "description": "Set to `true` to use the inline variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render\n`inline` must be `false`",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the checkbox",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "visited",
          "kind": "let",
          "description": "Set to `true` to allow visited styles",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the top-level HTML element",
          "type": "null | HTMLAnchorElement | HTMLParagraphElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "icon",
          "default": false,
          "fallback": "<svelte:component this=\"{icon}\" />",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "p" },
        { "type": "forwarded", "name": "mouseover", "element": "p" },
        { "type": "forwarded", "name": "mouseenter", "element": "p" },
        { "type": "forwarded", "name": "mouseleave", "element": "p" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a | p" }
    },
    {
      "moduleName": "ListBox",
      "filePath": "src/ListBox/ListBox.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the list box",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Set the type of the list box",
          "type": "\"default\" | \"inline\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the list box",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the list box",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "keydown", "element": "div" },
        { "type": "forwarded", "name": "click", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ListBoxField",
      "filePath": "src/ListBox/ListBoxField.svelte",
      "props": [
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the list box field",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "role",
          "kind": "let",
          "description": "Specify the role attribute",
          "type": "string",
          "value": "\"combobox\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"-1\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translationIds",
          "kind": "const",
          "description": "Default translation ids",
          "type": "{ close: \"close\", open: \"open\" }",
          "value": "{ close: \"close\", open: \"open\" }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": true,
          "reactive": false
        },
        {
          "name": "translateWithId",
          "kind": "let",
          "description": "Override the default translation ids",
          "type": "(id: ListBoxFieldTranslationId) => string",
          "value": "(id) => defaultTranslations[id]",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the top-level HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "forwarded", "name": "keydown", "element": "div" },
        { "type": "forwarded", "name": "focus", "element": "div" },
        { "type": "forwarded", "name": "blur", "element": "div" }
      ],
      "typedefs": [
        {
          "type": "\"close\" | \"open\"",
          "name": "ListBoxFieldTranslationId",
          "ts": "type ListBoxFieldTranslationId = \"close\" | \"open\""
        }
      ],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ListBoxMenu",
      "filePath": "src/ListBox/ListBoxMenu.svelte",
      "props": [
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [{ "type": "forwarded", "name": "scroll", "element": "div" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ListBoxMenuIcon",
      "filePath": "src/ListBox/ListBoxMenuIcon.svelte",
      "props": [
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the list box menu icon",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translationIds",
          "kind": "const",
          "description": "Default translation ids",
          "type": "{ close: \"close\", open: \"open\" }",
          "value": "{ close: \"close\", open: \"open\" }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": true,
          "reactive": false
        },
        {
          "name": "translateWithId",
          "kind": "let",
          "description": "Override the default translation ids",
          "type": "(id: ListBoxMenuIconTranslationId) => string",
          "value": "(id) => defaultTranslations[id]",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [{ "type": "forwarded", "name": "click", "element": "div" }],
      "typedefs": [
        {
          "type": "\"close\" | \"open\"",
          "name": "ListBoxMenuIconTranslationId",
          "ts": "type ListBoxMenuIconTranslationId = \"close\" | \"open\""
        }
      ],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ListBoxMenuItem",
      "filePath": "src/ListBox/ListBoxMenuItem.svelte",
      "props": [
        {
          "name": "active",
          "kind": "let",
          "description": "Set to `true` to enable the active state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "highlighted",
          "kind": "let",
          "description": "Set to `true` to enable the highlighted state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the menu item",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ListBoxSelection",
      "filePath": "src/ListBox/ListBoxSelection.svelte",
      "props": [
        {
          "name": "selectionCount",
          "kind": "let",
          "description": "Specify the number of selected items",
          "type": "number",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the list box selection",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translationIds",
          "kind": "const",
          "description": "Default translation ids",
          "type": "{     clearAll: \"clearAll\",     clearSelection: \"clearSelection\",   }",
          "value": "{     clearAll: \"clearAll\",     clearSelection: \"clearSelection\",   }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": true,
          "reactive": false
        },
        {
          "name": "translateWithId",
          "kind": "let",
          "description": "Override the default translation ids",
          "type": "(id: ListBoxSelectionTranslationId) => string",
          "value": "(id) => defaultTranslations[id]",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the top-level HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [{ "type": "dispatched", "name": "clear" }],
      "typedefs": [
        {
          "type": "\"clearAll\" | \"clearSelection\"",
          "name": "ListBoxSelectionTranslationId",
          "ts": "type ListBoxSelectionTranslationId = \"clearAll\" | \"clearSelection\""
        }
      ],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ListItem",
      "filePath": "src/ListItem/ListItem.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "li" },
        { "type": "forwarded", "name": "mouseover", "element": "li" },
        { "type": "forwarded", "name": "mouseenter", "element": "li" },
        { "type": "forwarded", "name": "mouseleave", "element": "li" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "li" }
    },
    {
      "moduleName": "Loading",
      "filePath": "src/Loading/Loading.svelte",
      "props": [
        {
          "name": "small",
          "kind": "let",
          "description": "Set to `true` to use the small variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "active",
          "kind": "let",
          "description": "Set to `false` to disable the active state",
          "type": "boolean",
          "value": "true",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "withOverlay",
          "kind": "let",
          "description": "Set to `false` to disable the overlay",
          "type": "boolean",
          "value": "true",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "description",
          "kind": "let",
          "description": "Specify the label description",
          "type": "string",
          "value": "\"Active loading indicator\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the label element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "LocalStorage",
      "filePath": "src/LocalStorage/LocalStorage.svelte",
      "props": [
        {
          "name": "key",
          "kind": "let",
          "description": "Specify the local storage key",
          "type": "string",
          "value": "\"local-storage-key\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Provide a value to persist",
          "type": "any",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "clearItem",
          "kind": "function",
          "description": "Remove the persisted key value from the browser's local storage",
          "type": "() => void",
          "value": "() => {     localStorage.removeItem(key);   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "clearAll",
          "kind": "function",
          "description": "Clear all key values from the browser's local storage",
          "type": "() => void",
          "value": "() => {     localStorage.clear();   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "dispatched", "name": "save", "detail": "null" },
        {
          "type": "dispatched",
          "name": "update",
          "detail": "{ prevValue: any; value: any; }"
        }
      ],
      "typedefs": []
    },
    {
      "moduleName": "Modal",
      "filePath": "src/Modal/Modal.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the modal",
          "type": "\"xs\" | \"sm\" | \"lg\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the modal",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "danger",
          "kind": "let",
          "description": "Set to `true` to use the danger variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "alert",
          "kind": "let",
          "description": "Set to `true` to enable alert mode",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "passiveModal",
          "kind": "let",
          "description": "Set to `true` to use the passive variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "modalHeading",
          "kind": "let",
          "description": "Specify the modal heading",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "modalLabel",
          "kind": "let",
          "description": "Specify the modal label",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "modalAriaLabel",
          "kind": "let",
          "description": "Specify the ARIA label for the modal",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the close icon",
          "type": "string",
          "value": "\"Close the modal\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hasForm",
          "kind": "let",
          "description": "Set to `true` if the modal contains form elements",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hasScrollingContent",
          "kind": "let",
          "description": "Set to `true` if the modal contains scrolling content",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "primaryButtonText",
          "kind": "let",
          "description": "Specify the primary button text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "primaryButtonDisabled",
          "kind": "let",
          "description": "Set to `true` to disable the primary button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "primaryButtonIcon",
          "kind": "let",
          "description": "Specify the primary button icon",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "shouldSubmitOnEnter",
          "kind": "let",
          "description": "Set to `true` for the \"submit\" and \"click:button--primary\" events\nto be dispatched when pressing \"Enter\"",
          "type": "boolean",
          "value": "true",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "secondaryButtonText",
          "kind": "let",
          "description": "Specify the secondary button text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "secondaryButtons",
          "kind": "let",
          "description": "2-tuple prop to render two secondary buttons for a 3 button modal\nsupersedes `secondaryButtonText`",
          "type": "[{ text: string; }, { text: string; }]",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectorPrimaryFocus",
          "kind": "let",
          "description": "Specify a selector to be focused when opening the modal",
          "type": "string",
          "value": "\"[data-modal-primary-focus]\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "preventCloseOnClickOutside",
          "kind": "let",
          "description": "Set to `true` to prevent the modal from closing when clicking outside",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the top-level HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "heading",
          "default": false,
          "fallback": "{modalHeading}",
          "slot_props": "{}"
        },
        {
          "name": "label",
          "default": false,
          "fallback": "{modalLabel}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "transitionend",
          "detail": "{ open: boolean; }"
        },
        {
          "type": "dispatched",
          "name": "click:button--secondary",
          "detail": "{ text: string; }"
        },
        { "type": "forwarded", "name": "keydown", "element": "div" },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "dispatched", "name": "submit", "detail": "null" },
        {
          "type": "dispatched",
          "name": "click:button--primary",
          "detail": "null"
        },
        { "type": "dispatched", "name": "close", "detail": "null" },
        { "type": "dispatched", "name": "open", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ModalBody",
      "filePath": "src/ComposedModal/ModalBody.svelte",
      "props": [
        {
          "name": "hasForm",
          "kind": "let",
          "description": "Set to `true` if the modal contains form elements",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hasScrollingContent",
          "kind": "let",
          "description": "Set to `true` if the modal contains scrolling content",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ModalFooter",
      "filePath": "src/ComposedModal/ModalFooter.svelte",
      "props": [
        {
          "name": "primaryButtonText",
          "kind": "let",
          "description": "Specify the primary button text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "primaryButtonIcon",
          "kind": "let",
          "description": "Specify the primary button icon",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "primaryButtonDisabled",
          "kind": "let",
          "description": "Set to `true` to disable the primary button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "primaryClass",
          "kind": "let",
          "description": "Specify a class for the primary button",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "secondaryButtonText",
          "kind": "let",
          "description": "Specify the secondary button text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "secondaryButtons",
          "kind": "let",
          "description": "2-tuple prop to render two secondary buttons for a 3 button modal\nsupersedes `secondaryButtonText`",
          "type": "[{ text: string; }, { text: string; }]",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "secondaryClass",
          "kind": "let",
          "description": "Specify a class for the secondary button",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "danger",
          "kind": "let",
          "description": "Set to `true` to use the danger variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        {
          "type": "dispatched",
          "name": "click:button--secondary",
          "detail": "{ text: string; }"
        }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ModalHeader",
      "filePath": "src/ComposedModal/ModalHeader.svelte",
      "props": [
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the modal title",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "label",
          "kind": "let",
          "description": "Specify the modal label",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelClass",
          "kind": "let",
          "description": "Specify the label class",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "titleClass",
          "kind": "let",
          "description": "Specify the title class",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "closeClass",
          "kind": "let",
          "description": "Specify the close class",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "closeIconClass",
          "kind": "let",
          "description": "Specify the close icon class",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the close icon",
          "type": "string",
          "value": "\"Close\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [{ "type": "forwarded", "name": "click", "element": "button" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "MultiSelect",
      "filePath": "src/MultiSelect/MultiSelect.svelte",
      "props": [
        {
          "name": "items",
          "kind": "let",
          "description": "Set the multiselect items",
          "type": "ReadonlyArray<MultiSelectItem>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "itemToString",
          "kind": "let",
          "description": "Override the display of a multiselect item",
          "type": "(item: MultiSelectItem) => any",
          "value": "(item) => item.text || item.id",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "itemToInput",
          "kind": "let",
          "description": "Override the item name, title, labelText passed to the checkbox input",
          "type": "(item: MultiSelectItem) => { name?: string; labelText?: any; title?: string; }",
          "value": "(item) => {}",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectedIds",
          "kind": "let",
          "description": "Set the selected ids",
          "type": "ReadonlyArray<MultiSelectItemId>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the multiselect value",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the combobox",
          "type": "\"sm\" | \"lg\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Specify the type of multiselect",
          "type": "\"default\" | \"inline\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "direction",
          "kind": "let",
          "description": "Specify the direction of the multiselect dropdown menu",
          "type": "\"bottom\" | \"top\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectionFeedback",
          "kind": "let",
          "description": "Specify the selection feedback after selecting items",
          "type": "\"top\" | \"fixed\" | \"top-after-reopen\"",
          "value": "\"top-after-reopen\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the dropdown",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "filterable",
          "kind": "let",
          "description": "Set to `true` to filter items",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "filterItem",
          "kind": "let",
          "description": "Override the filtering logic\nThe default filtering is an exact string comparison",
          "type": "(item: MultiSelectItem, value: string) => string",
          "value": "(item, value) =>     item.text.toLowerCase().includes(value.trim().toLowerCase())",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the dropdown",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "locale",
          "kind": "let",
          "description": "Specify the locale",
          "type": "string",
          "value": "\"en\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "placeholder",
          "kind": "let",
          "description": "Specify the placeholder text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "sortItem",
          "kind": "let",
          "description": "Override the sorting logic\nThe default sorting compare the item text value",
          "type": "((a: MultiSelectItem, b: MultiSelectItem) => MultiSelectItem) | (() => void)",
          "value": "(a, b) =>     a.text.localeCompare(b.text, locale, { numeric: true })",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translateWithId",
          "kind": "let",
          "description": "Override the chevron icon label based on the open state.\nDefaults to \"Open menu\" when closed and \"Close menu\" when open",
          "type": "(id: import(\"../ListBox/ListBoxMenuIcon.svelte\").ListBoxMenuIconTranslationId) => string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translateWithIdSelection",
          "kind": "let",
          "description": "Override the label of the clear button when the input has a selection.\nDefaults to \"Clear selected item\" and \"Clear all items\" if more than one item is selected",
          "type": "(id: import(\"../ListBox/ListBoxSelection.svelte\").ListBoxSelectionTranslationId) => string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "titleText",
          "kind": "let",
          "description": "Specify the title text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "useTitleInItem",
          "kind": "let",
          "description": "Set to `true` to pass the item to `itemToString` in the checkbox",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "label",
          "kind": "let",
          "description": "Specify the list box label",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the list box component",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the select",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "inputRef",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "multiSelectRef",
          "kind": "let",
          "description": "Obtain a reference to the outer div element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "fieldRef",
          "kind": "let",
          "description": "Obtain a reference to the field box element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "selectionRef",
          "kind": "let",
          "description": "Obtain a reference to the selection element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "highlightedId",
          "kind": "let",
          "description": "Id of the highlighted ListBoxMenuItem",
          "type": "null | MultiSelectItemId",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{itemToString(item)}",
          "slot_props": "{ item: MultiSelectItem; index: number }"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "select",
          "detail": "{ selectedIds: MultiSelectItemId[]; selected: MultiSelectItem[]; unselected: MultiSelectItem[]; }"
        },
        { "type": "dispatched", "name": "clear", "detail": "null" },
        {
          "type": "dispatched",
          "name": "blur",
          "detail": "FocusEvent | CustomEvent<FocusEvent>"
        },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" }
      ],
      "typedefs": [
        {
          "type": "any",
          "name": "MultiSelectItemId",
          "ts": "type MultiSelectItemId = any"
        },
        {
          "type": "string",
          "name": "MultiSelectItemText",
          "ts": "type MultiSelectItemText = string"
        },
        {
          "type": "{ id: MultiSelectItemId; text: MultiSelectItemText; disabled?: boolean; }",
          "name": "MultiSelectItem",
          "ts": "interface MultiSelectItem { id: MultiSelectItemId; text: MultiSelectItemText; disabled?: boolean; }"
        }
      ],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "NotificationActionButton",
      "filePath": "src/Notification/NotificationActionButton.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "Button" },
        { "type": "forwarded", "name": "mouseover", "element": "Button" },
        { "type": "forwarded", "name": "mouseenter", "element": "Button" },
        { "type": "forwarded", "name": "mouseleave", "element": "Button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "InlineComponent", "name": "Button" },
      "extends": {
        "interface": "ButtonProps",
        "import": "\"../Button/Button.svelte\""
      }
    },
    {
      "moduleName": "NotificationButton",
      "filePath": "src/Notification/NotificationButton.svelte",
      "props": [
        {
          "name": "notificationType",
          "kind": "let",
          "description": "Set the type of notification",
          "type": "\"toast\" | \"inline\"",
          "value": "\"toast\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title of the icon",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the icon",
          "type": "string",
          "value": "\"Close icon\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "mouseover", "element": "button" },
        { "type": "forwarded", "name": "mouseenter", "element": "button" },
        { "type": "forwarded", "name": "mouseleave", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "NotificationIcon",
      "filePath": "src/Notification/NotificationIcon.svelte",
      "props": [
        {
          "name": "kind",
          "kind": "let",
          "description": "Specify the kind of notification icon",
          "type": "\"error\" | \"info\" | \"info-square\" | \"success\" | \"warning\" | \"warning-alt\"",
          "value": "\"error\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "notificationType",
          "kind": "let",
          "description": "Set the type of notification",
          "type": "\"toast\" | \"inline\"",
          "value": "\"toast\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the icon",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": true,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "NumberInput",
      "filePath": "src/NumberInput/NumberInput.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the input",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the input value.\nUse `null` to denote \"no value\"",
          "type": "null | number",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "step",
          "kind": "let",
          "description": "Specify the step increment",
          "type": "number",
          "value": "1",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "max",
          "kind": "let",
          "description": "Specify the maximum value",
          "type": "number",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "min",
          "kind": "let",
          "description": "Specify the minimum value",
          "type": "number",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "readonly",
          "kind": "let",
          "description": "Set to `true` for the input to be read-only",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "allowEmpty",
          "kind": "let",
          "description": "Set to `true` to allow for an empty value",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideSteppers",
          "kind": "let",
          "description": "Set to `true` to hide the input stepper buttons",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the increment icons",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "label",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translateWithId",
          "kind": "let",
          "description": "Override the default translation ids",
          "type": "(id: NumberInputTranslationId) => string",
          "value": "(id) => defaultTranslations[id]",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translationIds",
          "kind": "const",
          "description": "Default translation ids",
          "type": "{ increment: \"increment\"; decrement: \"decrement\" }",
          "value": "{     increment: \"increment\",     decrement: \"decrement\",   }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": true,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "label",
          "default": false,
          "fallback": "{label}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "dispatched", "name": "change", "detail": "null | number" },
        { "type": "dispatched", "name": "input", "detail": "null | number" },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" }
      ],
      "typedefs": [
        {
          "type": "\"increment\" | \"decrement\"",
          "name": "NumberInputTranslationId",
          "ts": "type NumberInputTranslationId = \"increment\" | \"decrement\""
        }
      ],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "NumberInputSkeleton",
      "filePath": "src/NumberInput/NumberInputSkeleton.svelte",
      "props": [
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "OrderedList",
      "filePath": "src/OrderedList/OrderedList.svelte",
      "props": [
        {
          "name": "nested",
          "kind": "let",
          "description": "Set to `true` to use the nested variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "native",
          "kind": "let",
          "description": "Set to `true` to use native list styles",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expressive",
          "kind": "let",
          "description": "Set to `true` to use Carbon's expressive typesetting",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "ol" },
        { "type": "forwarded", "name": "mouseover", "element": "ol" },
        { "type": "forwarded", "name": "mouseenter", "element": "ol" },
        { "type": "forwarded", "name": "mouseleave", "element": "ol" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "ol" }
    },
    {
      "moduleName": "OutboundLink",
      "filePath": "src/Link/OutboundLink.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "Link" },
        { "type": "forwarded", "name": "mouseover", "element": "Link" },
        { "type": "forwarded", "name": "mouseenter", "element": "Link" },
        { "type": "forwarded", "name": "mouseleave", "element": "Link" }
      ],
      "typedefs": [],
      "rest_props": { "type": "InlineComponent", "name": "Link" },
      "extends": { "interface": "LinkProps", "import": "\"./Link.svelte\"" }
    },
    {
      "moduleName": "OverflowMenu",
      "filePath": "src/OverflowMenu/OverflowMenu.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the overflow menu",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "direction",
          "kind": "let",
          "description": "Specify the direction of the overflow menu relative to the button",
          "type": "\"top\" | \"bottom\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the menu",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "flipped",
          "kind": "let",
          "description": "Set to `true` to flip the menu relative to the button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "menuOptionsClass",
          "kind": "let",
          "description": "Specify the menu options class",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render.\nDefaults to `<OverflowMenuVertical />`",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "iconClass",
          "kind": "let",
          "description": "Specify the icon class",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the icon",
          "type": "string",
          "value": "\"Open and close list of options\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the button element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "buttonRef",
          "kind": "let",
          "description": "Obtain a reference to the trigger button element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "menuRef",
          "kind": "let",
          "description": "Obtain a reference to the overflow menu element",
          "type": "null | HTMLUListElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "menu",
          "default": false,
          "fallback": "<svelte:component\n      this=\"{icon}\"\n      aria-label=\"{iconDescription}\"\n      title=\"{iconDescription}\"\n      class=\"bx--overflow-menu__icon {iconClass}\"\n    />",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "close",
          "detail": "null | { index: number; text: string; }"
        },
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "mouseover", "element": "button" },
        { "type": "forwarded", "name": "mouseenter", "element": "button" },
        { "type": "forwarded", "name": "mouseleave", "element": "button" },
        { "type": "forwarded", "name": "keydown", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "OverflowMenuItem",
      "filePath": "src/OverflowMenu/OverflowMenuItem.svelte",
      "props": [
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the item text\nAlternatively, use the default slot for a custom element",
          "type": "string",
          "value": "\"Provide text\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute if the item is a link",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "primaryFocus",
          "kind": "let",
          "description": "Set to `true` if the item should be focused when opening the menu",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the item",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hasDivider",
          "kind": "let",
          "description": "Set to `true` to include a divider",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "danger",
          "kind": "let",
          "description": "Set to `true` to use the danger variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "requireTitle",
          "kind": "let",
          "description": "Set to `false` to omit the button `title` attribute",
          "type": "boolean",
          "value": "true",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML element",
          "type": "null | HTMLAnchorElement | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "<div class:bx--overflow-menu-options__option-content=\"{true}\">\n          {text}\n        </div>",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "a" },
        { "type": "forwarded", "name": "keydown", "element": "a" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "li" }
    },
    {
      "moduleName": "Pagination",
      "filePath": "src/Pagination/Pagination.svelte",
      "props": [
        {
          "name": "page",
          "kind": "let",
          "description": "Specify the current page index",
          "type": "number",
          "value": "1",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "totalItems",
          "kind": "let",
          "description": "Specify the total number of items",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the pagination",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "forwardText",
          "kind": "let",
          "description": "Specify the forward button text",
          "type": "string",
          "value": "\"Next page\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "backwardText",
          "kind": "let",
          "description": "Specify the backward button text",
          "type": "string",
          "value": "\"Previous page\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "itemsPerPageText",
          "kind": "let",
          "description": "Specify the items per page text",
          "type": "string",
          "value": "\"Items per page:\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "itemText",
          "kind": "let",
          "description": "Override the item text",
          "type": "(min: number, max: number) => string",
          "value": "(min, max) =>     `${min}–${max} item${max === 1 ? \"\" : \"s\"}`",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "itemRangeText",
          "kind": "let",
          "description": "Override the item range text",
          "type": "(min: number, max: number, total: number) => string",
          "value": "(min, max, total) =>     `${min}–${max} of ${total} item${max === 1 ? \"\" : \"s\"}`",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pageInputDisabled",
          "kind": "let",
          "description": "Set to `true` to disable the page input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pageSizeInputDisabled",
          "kind": "let",
          "description": "Set to `true` to disable the page size input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pageSize",
          "kind": "let",
          "description": "Specify the number of items to display in a page",
          "type": "number",
          "value": "10",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "pageSizes",
          "kind": "let",
          "description": "Specify the available page sizes",
          "type": "ReadonlyArray<number>",
          "value": "[10]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pagesUnknown",
          "kind": "let",
          "description": "Set to `true` if the number of pages is unknown",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pageText",
          "kind": "let",
          "description": "Override the page text",
          "type": "(page: number) => string",
          "value": "(page) => `page ${page}`",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pageRangeText",
          "kind": "let",
          "description": "Override the page range text",
          "type": "(current: number, total: number) => string",
          "value": "(current, total) =>     `of ${total} page${total === 1 ? \"\" : \"s\"}`",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        {
          "type": "dispatched",
          "name": "change",
          "detail": "{ page?: number; pageSize?: number }",
          "description": "Dispatched after any user interaction"
        },
        {
          "type": "dispatched",
          "name": "click:button--previous",
          "detail": "{ page: number; }"
        },
        {
          "type": "dispatched",
          "name": "click:button--next",
          "detail": "{ page: number; }"
        },
        {
          "type": "dispatched",
          "name": "update",
          "detail": "{ pageSize: number; page: number; }"
        }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "PaginationNav",
      "filePath": "src/PaginationNav/PaginationNav.svelte",
      "props": [
        {
          "name": "page",
          "kind": "let",
          "description": "Specify the current page index",
          "type": "number",
          "value": "1",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "total",
          "kind": "let",
          "description": "Specify the total number of pages",
          "type": "number",
          "value": "10",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "shown",
          "kind": "let",
          "description": "Specify the total number of pages to show",
          "type": "number",
          "value": "10",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "loop",
          "kind": "let",
          "description": "Set to `true` to loop the navigation",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "forwardText",
          "kind": "let",
          "description": "Specify the forward button text",
          "type": "string",
          "value": "\"Next page\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "backwardText",
          "kind": "let",
          "description": "Specify the backward button text",
          "type": "string",
          "value": "\"Previous page\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        {
          "type": "dispatched",
          "name": "change",
          "detail": "{ page: number; }",
          "description": "fires after every user interaction"
        },
        {
          "type": "dispatched",
          "name": "click:button--previous",
          "detail": "{ page: number; }"
        },
        {
          "type": "dispatched",
          "name": "click:button--next",
          "detail": "{ page: number; }"
        }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "nav" }
    },
    {
      "moduleName": "PaginationSkeleton",
      "filePath": "src/Pagination/PaginationSkeleton.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "PasswordInput",
      "filePath": "src/TextInput/PasswordInput.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the input",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the input value",
          "type": "number | string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Set to `\"text\"` to toggle the password visibility",
          "type": "\"text\" | \"password\"",
          "value": "\"password\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "placeholder",
          "kind": "let",
          "description": "Specify the placeholder text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hidePasswordLabel",
          "kind": "let",
          "description": "Specify the hide password label text",
          "type": "string",
          "value": "\"Hide password\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "showPasswordLabel",
          "kind": "let",
          "description": "Specify the show password label text",
          "type": "string",
          "value": "\"Show password\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tooltipAlignment",
          "kind": "let",
          "description": "Set the alignment of the tooltip relative to the icon",
          "type": "\"start\" | \"center\" | \"end\"",
          "value": "\"center\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tooltipPosition",
          "kind": "let",
          "description": "Set the position of the tooltip relative to the icon",
          "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the text for the invalid state",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "inline",
          "kind": "let",
          "description": "Set to `true` to use inline version",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "forwarded", "name": "change", "element": "input" },
        { "type": "forwarded", "name": "input", "element": "input" },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "Popover",
      "filePath": "src/Popover/Popover.svelte",
      "props": [
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to display the popover",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "closeOnOutsideClick",
          "kind": "let",
          "description": "Set to `true` to close the popover on an outside click",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "caret",
          "kind": "let",
          "description": "Set to `true` render a caret",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "align",
          "kind": "let",
          "description": "Specify the alignment of the caret",
          "type": "\"top\" | \"top-left\" | \"top-right\" | \"bottom\" | \"bottom-left\" | \"bottom-right\" | \"left\" | \"left-bottom\" | \"left-top\" | \"right\" | \"right-bottom\" | \"right-top\"",
          "value": "\"top\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "highContrast",
          "kind": "let",
          "description": "Set to `true` to enable the high contrast variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "relative",
          "kind": "let",
          "description": "Set to `true` to use a relative position",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        {
          "type": "dispatched",
          "name": "click:outside",
          "detail": "{ target: HTMLElement; }"
        }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ProgressBar",
      "filePath": "src/ProgressBar/ProgressBar.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the current value",
          "type": "number",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "max",
          "kind": "let",
          "description": "Specify the maximum value",
          "type": "number",
          "value": "100",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "kind",
          "kind": "let",
          "description": "Specify the kind of progress bar",
          "type": "\"default\" | \"inline\" | \"indented\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size",
          "type": "\"sm\" | \"md\"",
          "value": "\"md\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the progress bar element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ProgressIndicator",
      "filePath": "src/ProgressIndicator/ProgressIndicator.svelte",
      "props": [
        {
          "name": "currentIndex",
          "kind": "let",
          "description": "Specify the current step index",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "vertical",
          "kind": "let",
          "description": "Set to `true` to use the vertical variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "spaceEqually",
          "kind": "let",
          "description": "Set to `true` to specify whether the progress steps should be split equally in size in the div",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "preventChangeOnClick",
          "kind": "let",
          "description": "Set to `true` to prevent `currentIndex` from updating",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "dispatched", "name": "change", "detail": "number" },
        { "type": "forwarded", "name": "click", "element": "ul" },
        { "type": "forwarded", "name": "mouseover", "element": "ul" },
        { "type": "forwarded", "name": "mouseenter", "element": "ul" },
        { "type": "forwarded", "name": "mouseleave", "element": "ul" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "ul" }
    },
    {
      "moduleName": "ProgressIndicatorSkeleton",
      "filePath": "src/ProgressIndicator/ProgressIndicatorSkeleton.svelte",
      "props": [
        {
          "name": "vertical",
          "kind": "let",
          "description": "Set to `true` to use the vertical variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "count",
          "kind": "let",
          "description": "Specify the number of steps to render",
          "type": "number",
          "value": "4",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "ul" },
        { "type": "forwarded", "name": "mouseover", "element": "ul" },
        { "type": "forwarded", "name": "mouseenter", "element": "ul" },
        { "type": "forwarded", "name": "mouseleave", "element": "ul" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "ul" }
    },
    {
      "moduleName": "ProgressStep",
      "filePath": "src/ProgressIndicator/ProgressStep.svelte",
      "props": [
        {
          "name": "complete",
          "kind": "let",
          "description": "Set to `true` for the complete variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "current",
          "kind": "let",
          "description": "Set to `true` to use the current variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the progress step",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "description",
          "kind": "let",
          "description": "Specify the step description",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "label",
          "kind": "let",
          "description": "Specify the step label",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "secondaryLabel",
          "kind": "let",
          "description": "Specify the step secondary label",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "<p class:bx--progress-label=\"{true}\">{label}</p>",
          "slot_props": "{ props: { class: 'bx--progress-label' } }"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "mouseover", "element": "button" },
        { "type": "forwarded", "name": "mouseenter", "element": "button" },
        { "type": "forwarded", "name": "mouseleave", "element": "button" },
        { "type": "forwarded", "name": "keydown", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "li" }
    },
    {
      "moduleName": "RadioButton",
      "filePath": "src/RadioButton/RadioButton.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the value of the radio button",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "checked",
          "kind": "let",
          "description": "Set to `true` to check the radio button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the radio button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "required",
          "kind": "let",
          "description": "Set to `true` to mark the field as required",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelPosition",
          "kind": "let",
          "description": "Specify the label position",
          "type": "\"right\" | \"left\"",
          "value": "\"right\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the radio button input",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [{ "type": "forwarded", "name": "change", "element": "input" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "RadioButtonGroup",
      "filePath": "src/RadioButtonGroup/RadioButtonGroup.svelte",
      "props": [
        {
          "name": "selected",
          "kind": "let",
          "description": "Set the selected radio button value",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the radio buttons",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "legendText",
          "kind": "let",
          "description": "Specify the legend text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLegend",
          "kind": "let",
          "description": "Set to `true` to visually hide the legend",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelPosition",
          "kind": "let",
          "description": "Specify the label position",
          "type": "\"right\" | \"left\"",
          "value": "\"right\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "orientation",
          "kind": "let",
          "description": "Specify the orientation of the radio buttons",
          "type": "\"horizontal\" | \"vertical\"",
          "value": "\"horizontal\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the container div element",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "legendText",
          "default": false,
          "fallback": "{legendText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "dispatched", "name": "change" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "RadioButtonSkeleton",
      "filePath": "src/RadioButton/RadioButtonSkeleton.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "RadioTile",
      "filePath": "src/Tile/RadioTile.svelte",
      "props": [
        {
          "name": "checked",
          "kind": "let",
          "description": "Set to `true` to check the tile",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the tile",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the value of the radio input",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the radio tile checkmark icon",
          "type": "string",
          "value": "\"Tile checkmark\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "change", "element": "input" },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "click", "element": "label" },
        { "type": "forwarded", "name": "mouseover", "element": "label" },
        { "type": "forwarded", "name": "mouseenter", "element": "label" },
        { "type": "forwarded", "name": "mouseleave", "element": "label" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "label" }
    },
    {
      "moduleName": "RecursiveList",
      "filePath": "src/RecursiveList/RecursiveList.svelte",
      "props": [
        {
          "name": "children",
          "kind": "let",
          "description": "Specify the children to render",
          "type": "Array<RecursiveListNode & { children?: RecursiveListNode[]; }>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Specify the type of list to render",
          "type": "\"unordered\" | \"ordered\" | \"ordered-native\"",
          "value": "\"unordered\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [],
      "typedefs": [
        {
          "type": "{ text?: string; href?: string; html?: string; }",
          "name": "RecursiveListNode",
          "ts": "interface RecursiveListNode { text?: string; href?: string; html?: string; }"
        }
      ],
      "rest_props": { "type": "Element", "name": "ul | ol" }
    },
    {
      "moduleName": "Row",
      "filePath": "src/Grid/Row.svelte",
      "props": [
        {
          "name": "as",
          "kind": "let",
          "description": "Set to `true` to render a custom HTML element\nProps are destructured as `props` in the default slot (e.g., <Row let:props><section {...props}>...</section></Row>)",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "condensed",
          "kind": "let",
          "description": "Set to `true` to use the condensed variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "narrow",
          "kind": "let",
          "description": "Set to `true` to use the narrow variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutter",
          "kind": "let",
          "description": "Set to `true` to remove the gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutterLeft",
          "kind": "let",
          "description": "Set to `true` to remove the left gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noGutterRight",
          "kind": "let",
          "description": "Set to `true` to remove the right gutter",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "padding",
          "kind": "let",
          "description": "Set to `true` to add top and bottom padding to all columns",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{ props: { class: string; [key: string]: any; } }"
        }
      ],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Search",
      "filePath": "src/Search/Search.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the value of the search input",
          "type": "any",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the search input",
          "type": "\"sm\" | \"lg\" | \"xl\"",
          "value": "\"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "searchClass",
          "kind": "let",
          "description": "Specify the class name passed to the outer div element",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "skeleton",
          "kind": "let",
          "description": "Set to `true` to display the skeleton state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the search input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expandable",
          "kind": "let",
          "description": "Set to `true` to enable the expandable variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expanded",
          "kind": "let",
          "description": "Set to `true to expand the search input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "placeholder",
          "kind": "let",
          "description": "Specify the `placeholder` attribute of the search input",
          "type": "string",
          "value": "\"Search...\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "autocomplete",
          "kind": "let",
          "description": "Specify the `autocomplete` attribute",
          "type": "\"on\" | \"off\"",
          "value": "\"off\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "autofocus",
          "kind": "let",
          "description": "Set to `true` to auto focus the search element",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "closeButtonLabelText",
          "kind": "let",
          "description": "Specify the close button label text",
          "type": "string",
          "value": "\"Clear search input\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render.\nDefaults to `<Search />`",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "dispatched", "name": "expand", "detail": "null" },
        { "type": "dispatched", "name": "collapse", "detail": "null" },
        { "type": "forwarded", "name": "click", "element": "SearchSkeleton" },
        {
          "type": "forwarded",
          "name": "mouseover",
          "element": "SearchSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseenter",
          "element": "SearchSkeleton"
        },
        {
          "type": "forwarded",
          "name": "mouseleave",
          "element": "SearchSkeleton"
        },
        { "type": "forwarded", "name": "change", "element": "input" },
        { "type": "forwarded", "name": "input", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" },
        { "type": "dispatched", "name": "clear", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "SearchSkeleton",
      "filePath": "src/Search/SearchSkeleton.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the search input",
          "type": "\"sm\" | \"lg\" | \"xl\"",
          "value": "\"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Select",
      "filePath": "src/Select/Select.svelte",
      "props": [
        {
          "name": "selected",
          "kind": "let",
          "description": "Specify the selected item value",
          "type": "string | number",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the select input",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "inline",
          "kind": "let",
          "description": "Set to `true` to use the inline variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the select element",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the select element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the select element",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noLabel",
          "kind": "let",
          "description": "Set to `true` to not render a label",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the select HTML element",
          "type": "null | HTMLSelectElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "required",
          "kind": "let",
          "description": "Set to `true` to mark the field as required",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "update",
          "detail": "string | number",
          "description": "The selected value."
        },
        { "type": "forwarded", "name": "change", "element": "select" },
        { "type": "forwarded", "name": "input", "element": "select" },
        { "type": "forwarded", "name": "focus", "element": "select" },
        { "type": "forwarded", "name": "blur", "element": "select" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "SelectItem",
      "filePath": "src/Select/SelectItem.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the option value",
          "type": "string | number",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the option text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hidden",
          "kind": "let",
          "description": "Set to `true` to hide the option",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the option",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "SelectItemGroup",
      "filePath": "src/Select/SelectItemGroup.svelte",
      "props": [
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the optgroup element",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "label",
          "kind": "let",
          "description": "Specify the label attribute of the optgroup element",
          "type": "string",
          "value": "\"Provide label\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "optgroup" }
    },
    {
      "moduleName": "SelectSkeleton",
      "filePath": "src/Select/SelectSkeleton.svelte",
      "props": [
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "SelectableTile",
      "filePath": "src/Tile/SelectableTile.svelte",
      "props": [
        {
          "name": "selected",
          "kind": "let",
          "description": "Set to `true` to select the tile",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the tile",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title of the selectable tile",
          "type": "string",
          "value": "\"title\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the value of the selectable tile",
          "type": "string",
          "value": "\"value\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the selectable tile checkmark icon",
          "type": "string",
          "value": "\"Tile checkmark\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "label" },
        { "type": "forwarded", "name": "mouseover", "element": "label" },
        { "type": "forwarded", "name": "mouseenter", "element": "label" },
        { "type": "forwarded", "name": "mouseleave", "element": "label" },
        { "type": "forwarded", "name": "keydown", "element": "label" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "label" }
    },
    {
      "moduleName": "SideNav",
      "filePath": "src/UIShell/SideNav.svelte",
      "props": [
        {
          "name": "fixed",
          "kind": "let",
          "description": "Set to `true` to use the fixed variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "rail",
          "kind": "let",
          "description": "Set to `true` to use the rail variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ariaLabel",
          "kind": "let",
          "description": "Specify the ARIA label for the nav",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "isOpen",
          "kind": "let",
          "description": "Set to `true` to toggle the expanded state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "expansionBreakpoint",
          "kind": "let",
          "description": "The window width (px) at which the SideNav is expanded and the hamburger menu is hidden\n1056 represents the \"large\" breakpoint in pixels from the Carbon Design System:\nsmall: 320\nmedium: 672\nlarge: 1056\nx-large: 1312\nmax: 1584",
          "type": "number",
          "value": "1056",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "dispatched", "name": "open", "detail": "null" },
        { "type": "dispatched", "name": "close", "detail": "null" },
        { "type": "dispatched", "name": "click:overlay", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "nav" }
    },
    {
      "moduleName": "SideNavDivider",
      "filePath": "src/UIShell/SideNavDivider.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "li" }
    },
    {
      "moduleName": "SideNavItems",
      "filePath": "src/UIShell/SideNavItems.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "SideNavLink",
      "filePath": "src/UIShell/SideNavLink.svelte",
      "props": [
        {
          "name": "isSelected",
          "kind": "let",
          "description": "Set to `true` to select the current link",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the text",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML anchor element",
          "type": "null | HTMLAnchorElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{text}",
          "slot_props": "{}"
        },
        {
          "name": "icon",
          "default": false,
          "fallback": "<svelte:component this=\"{icon}\" />",
          "slot_props": "{}"
        }
      ],
      "events": [{ "type": "forwarded", "name": "click", "element": "a" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "SideNavMenu",
      "filePath": "src/UIShell/SideNavMenu.svelte",
      "props": [
        {
          "name": "expanded",
          "kind": "let",
          "description": "Set to `true` to toggle the expanded state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the text",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML button element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "icon",
          "default": false,
          "fallback": "<svelte:component this=\"{icon}\" />",
          "slot_props": "{}"
        }
      ],
      "events": [{ "type": "forwarded", "name": "click", "element": "button" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "SideNavMenuItem",
      "filePath": "src/UIShell/SideNavMenuItem.svelte",
      "props": [
        {
          "name": "isSelected",
          "kind": "let",
          "description": "Set to `true` to select the item",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the item text",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML anchor element",
          "type": "null | HTMLAnchorElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{text}",
          "slot_props": "{}"
        }
      ],
      "events": [{ "type": "forwarded", "name": "click", "element": "a" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "SkeletonPlaceholder",
      "filePath": "src/SkeletonPlaceholder/SkeletonPlaceholder.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "SkeletonText",
      "filePath": "src/SkeletonText/SkeletonText.svelte",
      "props": [
        {
          "name": "lines",
          "kind": "let",
          "description": "Specify the number of lines to render",
          "type": "number",
          "value": "3",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "heading",
          "kind": "let",
          "description": "Set to `true` to use the heading size variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "paragraph",
          "kind": "let",
          "description": "Set to `true` to use the paragraph size variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "width",
          "kind": "let",
          "description": "Specify the width of the text (% or px)",
          "type": "string",
          "value": "\"100%\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "SkipToContent",
      "filePath": "src/UIShell/SkipToContent.svelte",
      "props": [
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the `href` attribute",
          "type": "string",
          "value": "\"#main-content\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "Skip to main content",
          "slot_props": "{}"
        }
      ],
      "events": [{ "type": "forwarded", "name": "click", "element": "a" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "a" }
    },
    {
      "moduleName": "Slider",
      "filePath": "src/Slider/Slider.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the value of the slider",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "max",
          "kind": "let",
          "description": "Set the maximum slider value",
          "type": "number",
          "value": "100",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "maxLabel",
          "kind": "let",
          "description": "Specify the label for the max value",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "min",
          "kind": "let",
          "description": "Set the minimum slider value",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "minLabel",
          "kind": "let",
          "description": "Specify the label for the min value",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "step",
          "kind": "let",
          "description": "Set the step value",
          "type": "number",
          "value": "1",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "stepMultiplier",
          "kind": "let",
          "description": "Set the step multiplier value",
          "type": "number",
          "value": "4",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "required",
          "kind": "let",
          "description": "Set to `true` to require a value",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "inputType",
          "kind": "let",
          "description": "Specify the input type",
          "type": "string",
          "value": "\"number\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the slider",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideTextInput",
          "kind": "let",
          "description": "Set to `true` to hide the text input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "fullWidth",
          "kind": "let",
          "description": "Set to `true` for the slider to span\nthe full width of its containing element.",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the slider div element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Set a name for the slider element",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "dispatched", "name": "change" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "SliderSkeleton",
      "filePath": "src/Slider/SliderSkeleton.svelte",
      "props": [
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "StructuredList",
      "filePath": "src/StructuredList/StructuredList.svelte",
      "props": [
        {
          "name": "selected",
          "kind": "let",
          "description": "Specify the selected structured list row value",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "condensed",
          "kind": "let",
          "description": "Set to `true` to use the condensed variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "flush",
          "kind": "let",
          "description": "Set to `true` to flush the list",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selection",
          "kind": "let",
          "description": "Set to `true` to use the selection variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "dispatched", "name": "change" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "StructuredListBody",
      "filePath": "src/StructuredList/StructuredListBody.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "StructuredListCell",
      "filePath": "src/StructuredList/StructuredListCell.svelte",
      "props": [
        {
          "name": "head",
          "kind": "let",
          "description": "Set to `true` to use as a header",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "noWrap",
          "kind": "let",
          "description": "Set to `true` to prevent wrapping",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "StructuredListHead",
      "filePath": "src/StructuredList/StructuredListHead.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "StructuredListInput",
      "filePath": "src/StructuredList/StructuredListInput.svelte",
      "props": [
        {
          "name": "checked",
          "kind": "let",
          "description": "Set to `true` to check the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title of the input",
          "type": "string",
          "value": "\"title\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the value of the input",
          "type": "string",
          "value": "\"value\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "StructuredListRow",
      "filePath": "src/StructuredList/StructuredListRow.svelte",
      "props": [
        {
          "name": "head",
          "kind": "let",
          "description": "Set to `true` to use as a header",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "label",
          "kind": "let",
          "description": "Set to `true` to render a label slot",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "label" },
        { "type": "forwarded", "name": "mouseover", "element": "label" },
        { "type": "forwarded", "name": "mouseenter", "element": "label" },
        { "type": "forwarded", "name": "mouseleave", "element": "label" },
        { "type": "forwarded", "name": "keydown", "element": "label" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "label" }
    },
    {
      "moduleName": "StructuredListSkeleton",
      "filePath": "src/StructuredList/StructuredListSkeleton.svelte",
      "props": [
        {
          "name": "rows",
          "kind": "let",
          "description": "Specify the number of rows",
          "type": "number",
          "value": "5",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Switch",
      "filePath": "src/ContentSwitcher/Switch.svelte",
      "props": [
        {
          "name": "text",
          "kind": "let",
          "description": "Specify the switch text\nAlternatively, use the \"text\" slot  (e.g., <span slot=\"text\">...</span>)",
          "type": "string",
          "value": "\"Provide text\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selected",
          "kind": "let",
          "description": "Set to `true` for the switch to be selected",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the switch",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the button element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the button HTML element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{text}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "mouseover", "element": "button" },
        { "type": "forwarded", "name": "mouseenter", "element": "button" },
        { "type": "forwarded", "name": "mouseleave", "element": "button" },
        { "type": "forwarded", "name": "keydown", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "Tab",
      "filePath": "src/Tabs/Tab.svelte",
      "props": [
        {
          "name": "label",
          "kind": "let",
          "description": "Specify the tab label\nAlternatively, use the default slot (e.g., <Tab><span>Label</span></Tab>)",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "href",
          "kind": "let",
          "description": "Specify the href attribute",
          "type": "string",
          "value": "\"#\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the tab",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the anchor HTML element",
          "type": "null | HTMLAnchorElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "{label}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "li" },
        { "type": "forwarded", "name": "mouseover", "element": "li" },
        { "type": "forwarded", "name": "mouseenter", "element": "li" },
        { "type": "forwarded", "name": "mouseleave", "element": "li" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "li" }
    },
    {
      "moduleName": "TabContent",
      "filePath": "src/Tabs/TabContent.svelte",
      "props": [
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Table",
      "filePath": "src/DataTable/Table.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the table",
          "type": "\"compact\" | \"short\" | \"medium\" | \"tall\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "zebra",
          "kind": "let",
          "description": "Set to `true` to use zebra styles",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "useStaticWidth",
          "kind": "let",
          "description": "Set to `true` to use static width",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "sortable",
          "kind": "let",
          "description": "Set to `true` for the sortable variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "stickyHeader",
          "kind": "let",
          "description": "Set to `true` to enable a sticky header",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tableStyle",
          "kind": "let",
          "description": "Set the style attribute on the `table` element",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "section" }
    },
    {
      "moduleName": "TableBody",
      "filePath": "src/DataTable/TableBody.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "tbody" }
    },
    {
      "moduleName": "TableCell",
      "filePath": "src/DataTable/TableCell.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "td" },
        { "type": "forwarded", "name": "mouseover", "element": "td" },
        { "type": "forwarded", "name": "mouseenter", "element": "td" },
        { "type": "forwarded", "name": "mouseleave", "element": "td" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "td" }
    },
    {
      "moduleName": "TableContainer",
      "filePath": "src/DataTable/TableContainer.svelte",
      "props": [
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title of the data table",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "description",
          "kind": "let",
          "description": "Specify the description of the data table",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "stickyHeader",
          "kind": "let",
          "description": "Set to `true` to enable a sticky header",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "useStaticWidth",
          "kind": "let",
          "description": "Set to `true` to use static width",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "TableHead",
      "filePath": "src/DataTable/TableHead.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "thead" },
        { "type": "forwarded", "name": "mouseover", "element": "thead" },
        { "type": "forwarded", "name": "mouseenter", "element": "thead" },
        { "type": "forwarded", "name": "mouseleave", "element": "thead" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "thead" }
    },
    {
      "moduleName": "TableHeader",
      "filePath": "src/DataTable/TableHeader.svelte",
      "props": [
        {
          "name": "sortable",
          "kind": "let",
          "description": "Set to `true` for the sortable variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "sortDirection",
          "kind": "let",
          "description": "Specify the sort direction",
          "type": "\"none\" | \"ascending\" | \"descending\"",
          "value": "\"none\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "active",
          "kind": "let",
          "description": "Set to `true` if the column sorting",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "scope",
          "kind": "let",
          "description": "Specify the `scope` attribute",
          "type": "string",
          "value": "\"col\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "translateWithId",
          "kind": "let",
          "description": "Override the default id translations",
          "type": "() => string",
          "value": "() => \"\"",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the top-level element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "mouseover", "element": "th" },
        { "type": "forwarded", "name": "mouseenter", "element": "th" },
        { "type": "forwarded", "name": "mouseleave", "element": "th" },
        { "type": "forwarded", "name": "click", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "th" }
    },
    {
      "moduleName": "TableRow",
      "filePath": "src/DataTable/TableRow.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "tr" },
        { "type": "forwarded", "name": "mouseover", "element": "tr" },
        { "type": "forwarded", "name": "mouseenter", "element": "tr" },
        { "type": "forwarded", "name": "mouseleave", "element": "tr" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "tr" }
    },
    {
      "moduleName": "Tabs",
      "filePath": "src/Tabs/Tabs.svelte",
      "props": [
        {
          "name": "selected",
          "kind": "let",
          "description": "Specify the selected tab index",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Specify the type of tabs",
          "type": "\"default\" | \"container\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "autoWidth",
          "kind": "let",
          "description": "Set to `true` for tabs to have an auto-width",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the chevron icon",
          "type": "string",
          "value": "\"Show menu options\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "triggerHref",
          "kind": "let",
          "description": "Specify the tab trigger href attribute",
          "type": "string",
          "value": "\"#\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        { "name": "content", "default": false, "slot_props": "{}" }
      ],
      "events": [
        { "type": "forwarded", "name": "keypress", "element": "div" },
        { "type": "forwarded", "name": "click", "element": "a" },
        { "type": "dispatched", "name": "change" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "TabsSkeleton",
      "filePath": "src/Tabs/TabsSkeleton.svelte",
      "props": [
        {
          "name": "count",
          "kind": "let",
          "description": "Specify the number of tabs to render",
          "type": "number",
          "value": "4",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "type",
          "kind": "let",
          "description": "Specify the type of tabs",
          "type": "\"default\" | \"container\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Tag",
      "filePath": "src/Tag/Tag.svelte",
      "props": [
        {
          "name": "type",
          "kind": "let",
          "description": "Specify the type of tag",
          "type": "\"red\" | \"magenta\" | \"purple\" | \"blue\" | \"cyan\" | \"teal\" | \"green\" | \"gray\" | \"cool-gray\" | \"warm-gray\" | \"high-contrast\" | \"outline\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "size",
          "kind": "let",
          "type": "\"sm\" | \"default\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "filter",
          "kind": "let",
          "description": "Set to `true` to use filterable variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable a filterable tag",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "interactive",
          "kind": "let",
          "description": "Set to `true` to render a `button` element instead of a `div`",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "skeleton",
          "kind": "let",
          "description": "Set to `true` to display the skeleton state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "title",
          "kind": "let",
          "description": "Set the title for the close button in a filterable tag",
          "type": "string",
          "value": "\"Clear filter\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the filterable tag",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{ props: { class: 'bx--tag__label' } }"
        },
        {
          "name": "icon",
          "default": false,
          "fallback": "<svelte:component this=\"{icon}\" />",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "TagSkeleton" },
        { "type": "forwarded", "name": "mouseover", "element": "TagSkeleton" },
        { "type": "forwarded", "name": "mouseenter", "element": "TagSkeleton" },
        { "type": "forwarded", "name": "mouseleave", "element": "TagSkeleton" },
        { "type": "dispatched", "name": "close", "detail": "null" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div | span" }
    },
    {
      "moduleName": "TagSkeleton",
      "filePath": "src/Tag/TagSkeleton.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "type": "\"sm\" | \"default\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "span" },
        { "type": "forwarded", "name": "mouseover", "element": "span" },
        { "type": "forwarded", "name": "mouseenter", "element": "span" },
        { "type": "forwarded", "name": "mouseleave", "element": "span" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "span" }
    },
    {
      "moduleName": "TextArea",
      "filePath": "src/TextArea/TextArea.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the textarea value",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "placeholder",
          "kind": "let",
          "description": "Specify the placeholder text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "cols",
          "kind": "let",
          "description": "Specify the number of cols",
          "type": "number",
          "value": "50",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "rows",
          "kind": "let",
          "description": "Specify the number of rows",
          "type": "number",
          "value": "4",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "maxCount",
          "kind": "let",
          "description": "Specify the max character count",
          "type": "number",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "readonly",
          "kind": "let",
          "description": "Set to `true` to use the read-only variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the text for the invalid state",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the textarea element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the textarea HTML element",
          "type": "null | HTMLTextAreaElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "forwarded", "name": "change", "element": "textarea" },
        { "type": "forwarded", "name": "input", "element": "textarea" },
        { "type": "forwarded", "name": "keydown", "element": "textarea" },
        { "type": "forwarded", "name": "keyup", "element": "textarea" },
        { "type": "forwarded", "name": "focus", "element": "textarea" },
        { "type": "forwarded", "name": "blur", "element": "textarea" },
        { "type": "forwarded", "name": "paste", "element": "textarea" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "textarea" }
    },
    {
      "moduleName": "TextAreaSkeleton",
      "filePath": "src/TextArea/TextAreaSkeleton.svelte",
      "props": [
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "TextInput",
      "filePath": "src/TextInput/TextInput.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Set the size of the input",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the input value.\n\n`value` will be set to `null` if type=\"number\"\nand the value is empty.",
          "type": "null | number | string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "placeholder",
          "kind": "let",
          "description": "Specify the placeholder text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "helperText",
          "kind": "let",
          "description": "Specify the helper text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warn",
          "kind": "let",
          "description": "Set to `true` to indicate an warning state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "warnText",
          "kind": "let",
          "description": "Specify the warning state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "required",
          "kind": "let",
          "description": "Set to `true` to mark the field as required",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "inline",
          "kind": "let",
          "description": "Set to `true` to use the inline variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "readonly",
          "kind": "let",
          "description": "Set to `true` to use the read-only variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "change",
          "detail": "null | number | string"
        },
        {
          "type": "dispatched",
          "name": "input",
          "detail": "null | number | string"
        },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "TextInputSkeleton",
      "filePath": "src/TextInput/TextInputSkeleton.svelte",
      "props": [
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Theme",
      "filePath": "src/Theme/Theme.svelte",
      "props": [
        {
          "name": "theme",
          "kind": "let",
          "description": "Set the current Carbon theme",
          "type": "CarbonTheme",
          "value": "\"white\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "tokens",
          "kind": "let",
          "description": "Customize a theme with your own tokens\n@see https://carbondesignsystem.com/guidelines/themes/overview#customizing-a-theme",
          "type": "{ [token: string]: any; }",
          "value": "{}",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "persist",
          "kind": "let",
          "description": "Set to `true` to persist the theme using window.localStorage",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "persistKey",
          "kind": "let",
          "description": "Specify the local storage key",
          "type": "string",
          "value": "\"theme\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "render",
          "kind": "let",
          "description": "Render a toggle or select dropdown to control the theme",
          "type": "\"toggle\" | \"select\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "toggle",
          "kind": "let",
          "description": "Override the default toggle props",
          "type": "import(\"../Toggle/Toggle\").ToggleProps & { themes?: [labelA: CarbonTheme, labelB: CarbonTheme]; }",
          "value": "{     themes: [\"white\", \"g100\"],     labelA: \"\",     labelB: \"\",     labelText: \"Dark mode\",     hideLabel: false,   }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "select",
          "kind": "let",
          "description": "Override the default select props",
          "type": "import(\"../Select/Select\").SelectProps & { themes?: CarbonTheme[]; }",
          "value": "{     themes: themeKeys,     labelText: \"Themes\",     hideLabel: false,   }",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{ theme: CarbonTheme; }"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "update",
          "detail": "{ theme: CarbonTheme; }"
        }
      ],
      "typedefs": [
        {
          "type": "\"white\" | \"g10\" | \"g80\" | \"g90\" | \"g100\"",
          "name": "CarbonTheme",
          "ts": "type CarbonTheme = \"white\" | \"g10\" | \"g80\" | \"g90\" | \"g100\""
        }
      ]
    },
    {
      "moduleName": "Tile",
      "filePath": "src/Tile/Tile.svelte",
      "props": [
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "TileGroup",
      "filePath": "src/Tile/TileGroup.svelte",
      "props": [
        {
          "name": "selected",
          "kind": "let",
          "description": "Specify the selected tile value",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the tile group",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "legend",
          "kind": "let",
          "description": "Specify the legend text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [{ "type": "dispatched", "name": "select" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "fieldset" }
    },
    {
      "moduleName": "TimePicker",
      "filePath": "src/TimePicker/TimePicker.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the size of the input",
          "type": "\"sm\" | \"xl\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the input value",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "placeholder",
          "kind": "let",
          "description": "Specify the input placeholder text",
          "type": "string",
          "value": "\"hh:mm\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "pattern",
          "kind": "let",
          "description": "Specify the `pattern` attribute for the input element",
          "type": "string",
          "value": "\"(1[012]|[1-9]):[0-5][0-9](\\\\s)?\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "maxlength",
          "kind": "let",
          "description": "Specify the `maxlength` input attribute",
          "type": "number",
          "value": "5",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "light",
          "kind": "let",
          "description": "Set to `true` to enable the light variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalid",
          "kind": "let",
          "description": "Set to `true` to indicate an invalid state",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "invalidText",
          "kind": "let",
          "description": "Specify the invalid state text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the input",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "forwarded", "name": "change", "element": "input" },
        { "type": "forwarded", "name": "input", "element": "input" },
        { "type": "forwarded", "name": "keydown", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" },
        { "type": "forwarded", "name": "paste", "element": "input" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "TimePickerSelect",
      "filePath": "src/TimePicker/TimePickerSelect.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the select value",
          "type": "number | string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the select",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the chevron icon",
          "type": "string",
          "value": "\"Open list of options\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the select element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the select element",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the select HTML element",
          "type": "null | HTMLSelectElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ToastNotification",
      "filePath": "src/Notification/ToastNotification.svelte",
      "props": [
        {
          "name": "kind",
          "kind": "let",
          "description": "Specify the kind of notification",
          "type": "\"error\" | \"info\" | \"info-square\" | \"success\" | \"warning\" | \"warning-alt\"",
          "value": "\"error\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "lowContrast",
          "kind": "let",
          "description": "Set to `true` to use the low contrast variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "timeout",
          "kind": "let",
          "description": "Set the timeout duration (ms) to hide the notification after opening it",
          "type": "number",
          "value": "0",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "role",
          "kind": "let",
          "description": "Set the `role` attribute",
          "type": "string",
          "value": "\"alert\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "title",
          "kind": "let",
          "description": "Specify the title text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "subtitle",
          "kind": "let",
          "description": "Specify the subtitle text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "caption",
          "kind": "let",
          "description": "Specify the caption text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "statusIconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the status icon",
          "type": "string",
          "value": "kind + \" icon\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "closeButtonDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the close button",
          "type": "string",
          "value": "\"Close notification\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideCloseButton",
          "kind": "let",
          "description": "Set to `true` to hide the close button",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "fullWidth",
          "kind": "let",
          "description": "Set to `true` for the notification to span\nthe full width of its containing element.",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "caption",
          "default": false,
          "fallback": "{caption}",
          "slot_props": "{}"
        },
        {
          "name": "subtitle",
          "default": false,
          "fallback": "{subtitle}",
          "slot_props": "{}"
        },
        {
          "name": "title",
          "default": false,
          "fallback": "{title}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "close",
          "detail": "{ timeout: boolean }"
        },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Toggle",
      "filePath": "src/Toggle/Toggle.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the toggle size",
          "type": "\"default\" | \"sm\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "toggled",
          "kind": "let",
          "description": "Set to `true` to toggle the checkbox input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable checkbox input",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelA",
          "kind": "let",
          "description": "Specify the label for the untoggled state",
          "type": "string",
          "value": "\"Off\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelB",
          "kind": "let",
          "description": "Specify the label for the toggled state",
          "type": "string",
          "value": "\"On\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "name",
          "kind": "let",
          "description": "Specify a name attribute for the checkbox input",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelA",
          "default": false,
          "fallback": "{labelA}",
          "slot_props": "{}"
        },
        {
          "name": "labelB",
          "default": false,
          "fallback": "{labelB}",
          "slot_props": "{}"
        },
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "toggle",
          "detail": "{ toggled: boolean; }"
        },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" },
        { "type": "forwarded", "name": "change", "element": "input" },
        { "type": "forwarded", "name": "keyup", "element": "input" },
        { "type": "forwarded", "name": "focus", "element": "input" },
        { "type": "forwarded", "name": "blur", "element": "input" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ToggleSkeleton",
      "filePath": "src/Toggle/ToggleSkeleton.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the toggle size",
          "type": "\"default\" | \"sm\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the input element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mouseover", "element": "div" },
        { "type": "forwarded", "name": "mouseenter", "element": "div" },
        { "type": "forwarded", "name": "mouseleave", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "Toolbar",
      "filePath": "src/DataTable/Toolbar.svelte",
      "props": [
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the toolbar size",
          "type": "\"sm\" | \"default\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "section" }
    },
    {
      "moduleName": "ToolbarBatchActions",
      "filePath": "src/DataTable/ToolbarBatchActions.svelte",
      "props": [
        {
          "name": "formatTotalSelected",
          "kind": "let",
          "description": "Override the total items selected text",
          "type": "(totalSelected: number) => string",
          "value": "(totalSelected) =>     `${totalSelected} item${totalSelected === 1 ? \"\" : \"s\"} selected`",
          "isFunction": true,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "active",
          "kind": "let",
          "description": "Use a boolean to show or hide the toolbar",
          "type": "undefined | boolean",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "cancel",
          "default": false,
          "fallback": "Cancel",
          "slot_props": "{}"
        }
      ],
      "events": [{ "type": "dispatched", "name": "cancel", "detail": "null" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "ToolbarContent",
      "filePath": "src/DataTable/ToolbarContent.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "ToolbarMenu",
      "filePath": "src/DataTable/ToolbarMenu.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "InlineComponent", "name": "OverflowMenu" },
      "extends": {
        "interface": "OverflowMenuProps",
        "import": "\"../OverflowMenu/OverflowMenu.svelte\""
      }
    },
    {
      "moduleName": "ToolbarMenuItem",
      "filePath": "src/DataTable/ToolbarMenuItem.svelte",
      "props": [],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "OverflowMenuItem" },
        {
          "type": "forwarded",
          "name": "keydown",
          "element": "OverflowMenuItem"
        }
      ],
      "typedefs": [],
      "rest_props": { "type": "InlineComponent", "name": "OverflowMenuItem" },
      "extends": {
        "interface": "OverflowMenuItemProps",
        "import": "\"../OverflowMenu/OverflowMenuItem.svelte\""
      }
    },
    {
      "moduleName": "ToolbarSearch",
      "filePath": "src/DataTable/ToolbarSearch.svelte",
      "props": [
        {
          "name": "value",
          "kind": "let",
          "description": "Specify the value of the search input",
          "type": "number | string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "expanded",
          "kind": "let",
          "description": "Set to `true` to expand the search bar",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "persistent",
          "kind": "let",
          "description": "Set to `true` to keep the search bar expanded",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the search bar",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "shouldFilterRows",
          "kind": "let",
          "description": "Set to `true` to filter table rows using the search value.\n\nIf `true`, the default search excludes `id`, `cells` fields and\nonly does a basic comparison on string and number type cell values.\n\nTo implement your own client-side filtering, pass a function\nthat accepts a row and value and returns a boolean.",
          "type": "boolean | ((row: import(\"./DataTable.svelte\").DataTableRow, value: number | string) => boolean)",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "filteredRowIds",
          "kind": "let",
          "description": "The filtered row ids",
          "type": "ReadonlyArray<import(\"./DataTable.svelte\").DataTableRowId>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Specify the tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the input HTML element",
          "type": "null | HTMLInputElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [],
      "events": [
        { "type": "forwarded", "name": "clear", "element": "Search" },
        { "type": "forwarded", "name": "change", "element": "Search" },
        { "type": "forwarded", "name": "input", "element": "Search" },
        { "type": "forwarded", "name": "focus", "element": "Search" },
        { "type": "forwarded", "name": "blur", "element": "Search" },
        { "type": "forwarded", "name": "keyup", "element": "Search" },
        { "type": "forwarded", "name": "keydown", "element": "Search" },
        { "type": "forwarded", "name": "paste", "element": "Search" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "input" }
    },
    {
      "moduleName": "Tooltip",
      "filePath": "src/Tooltip/Tooltip.svelte",
      "props": [
        {
          "name": "align",
          "kind": "let",
          "description": "Set the alignment of the tooltip relative to the icon",
          "type": "\"start\" | \"center\" | \"end\"",
          "value": "\"center\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "direction",
          "kind": "let",
          "description": "Set the direction of the tooltip relative to the button",
          "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the tooltip",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "hideIcon",
          "kind": "let",
          "description": "Set to `true` to hide the tooltip icon",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render for the tooltip button.\nDefault to `<Information />`",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconDescription",
          "kind": "let",
          "description": "Specify the ARIA label for the tooltip button",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "iconName",
          "kind": "let",
          "description": "Specify the icon name attribute",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tabindex",
          "kind": "let",
          "description": "Set the button tabindex",
          "type": "string",
          "value": "\"0\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "tooltipId",
          "kind": "let",
          "description": "Set an id for the tooltip",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "triggerId",
          "kind": "let",
          "description": "Set an id for the tooltip button",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "triggerText",
          "kind": "let",
          "description": "Set the tooltip button text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the trigger text HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "refTooltip",
          "kind": "let",
          "description": "Obtain a reference to the tooltip HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "refIcon",
          "kind": "let",
          "description": "Obtain a reference to the icon HTML element",
          "type": "null | HTMLDivElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "icon",
          "default": false,
          "fallback": "<svelte:component this=\"{icon}\" name=\"{iconName}\" />",
          "slot_props": "{}"
        },
        {
          "name": "triggerText",
          "default": false,
          "fallback": "{triggerText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "dispatched", "name": "open", "detail": "null" },
        { "type": "dispatched", "name": "close", "detail": "null" },
        { "type": "forwarded", "name": "click", "element": "div" },
        { "type": "forwarded", "name": "mousedown", "element": "div" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "div" }
    },
    {
      "moduleName": "TooltipDefinition",
      "filePath": "src/TooltipDefinition/TooltipDefinition.svelte",
      "props": [
        {
          "name": "tooltipText",
          "kind": "let",
          "description": "Specify the tooltip text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "open",
          "kind": "let",
          "description": "Set to `true` to open the tooltip",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "align",
          "kind": "let",
          "description": "Set the alignment of the tooltip relative to the icon",
          "type": "\"start\" | \"center\" | \"end\"",
          "value": "\"center\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "direction",
          "kind": "let",
          "description": "Set the direction of the tooltip relative to the icon",
          "type": "\"top\" | \"bottom\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the tooltip div element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the button HTML element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        { "name": "__default__", "default": true, "slot_props": "{}" },
        {
          "name": "tooltip",
          "default": false,
          "fallback": "{tooltipText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "dispatched", "name": "open", "detail": "null" },
        { "type": "dispatched", "name": "close", "detail": "null" },
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "mouseover", "element": "button" },
        { "type": "forwarded", "name": "mouseenter", "element": "button" },
        { "type": "forwarded", "name": "mouseleave", "element": "button" },
        { "type": "forwarded", "name": "focus", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "span" }
    },
    {
      "moduleName": "TooltipFooter",
      "filePath": "src/Tooltip/TooltipFooter.svelte",
      "props": [
        {
          "name": "selectorPrimaryFocus",
          "kind": "let",
          "description": "Specify a selector to be focused inside the footer when opening the tooltip",
          "type": "string",
          "value": "\"a[href], button:not([disabled])\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": []
    },
    {
      "moduleName": "TooltipIcon",
      "filePath": "src/TooltipIcon/TooltipIcon.svelte",
      "props": [
        {
          "name": "tooltipText",
          "kind": "let",
          "description": "Specify the tooltip text.\nAlternatively, use the \"tooltipText\" slot",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "icon",
          "kind": "let",
          "description": "Specify the icon to render",
          "type": "typeof import(\"svelte\").SvelteComponent",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Set to `true` to disable the tooltip icon",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "align",
          "kind": "let",
          "description": "Set the alignment of the tooltip relative to the icon",
          "type": "\"start\" | \"center\" | \"end\"",
          "value": "\"center\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "direction",
          "kind": "let",
          "description": "Set the direction of the tooltip relative to the icon",
          "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
          "value": "\"bottom\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "id",
          "kind": "let",
          "description": "Set an id for the span element",
          "type": "string",
          "value": "\"ccs-\" + Math.random().toString(36)",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "ref",
          "kind": "let",
          "description": "Obtain a reference to the button HTML element",
          "type": "null | HTMLButtonElement",
          "value": "null",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "<svelte:component this=\"{icon}\" />",
          "slot_props": "{}"
        },
        {
          "name": "tooltipText",
          "default": false,
          "fallback": "{tooltipText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        { "type": "forwarded", "name": "click", "element": "button" },
        { "type": "forwarded", "name": "mouseover", "element": "button" },
        { "type": "forwarded", "name": "mouseenter", "element": "button" },
        { "type": "forwarded", "name": "mouseleave", "element": "button" },
        { "type": "forwarded", "name": "focus", "element": "button" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    },
    {
      "moduleName": "TreeView",
      "filePath": "src/TreeView/TreeView.svelte",
      "props": [
        {
          "name": "children",
          "kind": "let",
          "description": "Provide an array of children nodes to render",
          "type": "Array<TreeNode>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "activeId",
          "kind": "let",
          "description": "Set the current active node id\nOnly one node can be active",
          "type": "TreeNodeId",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "selectedIds",
          "kind": "let",
          "description": "Set the node ids to be selected",
          "type": "ReadonlyArray<TreeNodeId>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "expandedIds",
          "kind": "let",
          "description": "Set the node ids to be expanded",
          "type": "ReadonlyArray<TreeNodeId>",
          "value": "[]",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": true
        },
        {
          "name": "size",
          "kind": "let",
          "description": "Specify the TreeView size",
          "type": "\"default\" | \"compact\"",
          "value": "\"default\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "labelText",
          "kind": "let",
          "description": "Specify the label text",
          "type": "string",
          "value": "\"\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hideLabel",
          "kind": "let",
          "description": "Set to `true` to visually hide the label text",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expandAll",
          "kind": "function",
          "description": "Programmatically expand all nodes",
          "type": "() => void",
          "value": "() => {     expandedIds = [...nodeIds];   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "collapseAll",
          "kind": "function",
          "description": "Programmatically collapse all nodes",
          "type": "() => void",
          "value": "() => {     expandedIds = [];   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expandNodes",
          "kind": "function",
          "description": "Programmatically expand a subset of nodes.\nExpands all nodes if no argument is provided",
          "type": "(filterId?: (node: TreeNode) => boolean) => void",
          "value": "() => {     expandedIds = nodes       .filter(         (node) =>           filterNode(node) ||           node.children?.some((child) => filterNode(child) && child.children)       )       .map((node) => node.id);   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "collapseNodes",
          "kind": "function",
          "description": "Programmatically collapse a subset of nodes.\nCollapses all nodes if no argument is provided",
          "type": "(filterId?: (node: TreeNode) => boolean) => void",
          "value": "() => {     expandedIds = nodes       .filter((node) => expandedIds.includes(node.id) && !filterNode(node))       .map((node) => node.id);   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "labelText",
          "default": false,
          "fallback": "{labelText}",
          "slot_props": "{}"
        }
      ],
      "events": [
        {
          "type": "dispatched",
          "name": "select",
          "detail": "TreeNode & { expanded: boolean; leaf: boolean; }"
        },
        {
          "type": "dispatched",
          "name": "toggle",
          "detail": "TreeNode & { expanded: boolean; leaf: boolean; }"
        },
        {
          "type": "dispatched",
          "name": "focus",
          "detail": "TreeNode & { expanded: boolean; leaf: boolean; }"
        },
        { "type": "forwarded", "name": "keydown", "element": "ul" }
      ],
      "typedefs": [
        {
          "type": "string | number",
          "name": "TreeNodeId",
          "ts": "type TreeNodeId = string | number"
        },
        {
          "type": "{ id: TreeNodeId; text: any; icon?: typeof import(\"svelte\").SvelteComponent; disabled?: boolean; children?: TreeNode[]; }",
          "name": "TreeNode",
          "ts": "interface TreeNode { id: TreeNodeId; text: any; icon?: typeof import(\"svelte\").SvelteComponent; disabled?: boolean; children?: TreeNode[]; }"
        }
      ],
      "rest_props": { "type": "Element", "name": "ul" }
    },
    {
      "moduleName": "Truncate",
      "filePath": "src/Truncate/Truncate.svelte",
      "props": [
        {
          "name": "clamp",
          "kind": "let",
          "type": "\"end\" | \"front\"",
          "value": "\"end\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "p" }
    },
    {
      "moduleName": "UnorderedList",
      "filePath": "src/UnorderedList/UnorderedList.svelte",
      "props": [
        {
          "name": "nested",
          "kind": "let",
          "description": "Set to `true` to use the nested variant",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "expressive",
          "kind": "let",
          "description": "Set to `true` to use Carbon's expressive typesetting",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "isRequired": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [
        { "type": "forwarded", "name": "click", "element": "ul" },
        { "type": "forwarded", "name": "mouseover", "element": "ul" },
        { "type": "forwarded", "name": "mouseenter", "element": "ul" },
        { "type": "forwarded", "name": "mouseleave", "element": "ul" }
      ],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "ul" }
    }
  ]
}
