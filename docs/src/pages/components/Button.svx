<script>
  import { InlineNotification, Button } from "carbon-components-svelte";
  import Add from "carbon-icons-svelte/lib/Add.svelte";
  import TrashCan from "carbon-icons-svelte/lib/TrashCan.svelte";
  import Login from "carbon-icons-svelte/lib/Login.svelte";
  import Preview from "../../components/Preview.svelte";

  let index = 1;
</script>

## Primary button

<Button>Primary button</Button>

## Secondary button

<Button kind="secondary">Secondary button</Button>

## Tertiary button

<Button kind="tertiary">Tertiary button</Button>

## Ghost button

<Button kind="ghost">Ghost button</Button>

## Danger button

<Button kind="danger">Danger button</Button>

## Danger tertiary button

<Button kind="danger--tertiary">Danger tertiary button</Button>

## Danger tertiary, icon-only button

<InlineNotification svx-ignore lowContrast title="Note:" kind="info" hideCloseButton>
  <div class="body-short-01">
    You must provide an <strong>iconDescription</strong> for screen readers.
  </div>
</InlineNotification>

<Button kind="danger--tertiary"iconDescription="Delete" icon={TrashCan} />

## Danger ghost button

<Button kind="danger--ghost">Danger ghost button</Button>

## Button with icon

<Button icon={Add}>With icon</Button>

## Icon-only button

<InlineNotification svx-ignore lowContrast title="Note:" kind="info" hideCloseButton>
  <div class="body-short-01">
    You must provide an <strong>iconDescription</strong> for screen readers.
  </div>
</InlineNotification>

<Button iconDescription="Tooltip text" icon={Add} />

## Icon-only, link button

<Button iconDescription="Login" icon={Login} href="#" />

## Icon-only button (custom tooltip position)

The tooltip position and alignment can be controlled by `tooltipPosition` and `tooltipAlignment`.

<Button tooltipPosition="right" tooltipAlignment="end" iconDescription="Tooltip text" icon={Add} />

## Selected icon-only, ghost button

Set `isSelected` to `true` to enable the selected state for an icon-only, ghost button.

<FileSource src="/framed/Button/SelectedIconOnlyButton" />

## Link button

If an `href` value is specified, the component will render an [anchor element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) instead of a `button` element.

<Button href="#">Link button</Button>

## Custom element

<Button as="div">
  Custom element
</Button>

## Sizes

Button is available in small, medium, large, extra-large, and double-extra-large.
Use `md` (default) when used with form fields.

<Button size="sm">Small</Button>
<Button size="md">Medium</Button>
<Button size="lg">Large</Button>
<Button size="xl">Extra Large</Button>
<Button size="2xl">Double extra Large</Button>

## Disabled state

<Button disabled>Disabled button</Button>
<Button disabled iconDescription="Tooltip text" icon={Add} />

## Expressive styles

Set `expressive` to `true` to use Carbon's expressive typesetting.

<Button expressive size="xl">Primary</Button>
<Button expressive size="xl" kind="secondary">Secondary</Button>
<Button expressive size="xl" kind="tertiary">Tertiary</Button>
<Button expressive size="xl" kind="ghost">Ghost</Button>
<Button expressive size="xl" kind="danger">Danger</Button>
<br /><br />
<Button expressive size="lg">Primary</Button>
<Button expressive size="lg" kind="secondary">Secondary</Button>
<Button expressive size="lg" kind="tertiary">Tertiary</Button>
<Button expressive size="lg" kind="ghost">Ghost</Button>
<Button expressive size="lg" kind="danger">Danger</Button>
<br /><br />
<Button expressive>Primary</Button>
<Button expressive kind="secondary">Secondary</Button>
<Button expressive kind="tertiary">Tertiary</Button>
<Button expressive kind="ghost">Ghost</Button>
<Button expressive kind="danger">Danger</Button>

## Additional attributes

Use `buttonAttributes` to pass any additional attributes.

<Button buttonAttributes={{class: 'ready'}}>Ready</Button>

## Skeleton

<Button skeleton size="2xl" />
<Button skeleton size="xl" />
<Button skeleton size="lg" />
<Button skeleton size="md" />
<Button skeleton size="sm" />

## Programmatic focus

Bind to the `ref` prop to access a reference to the underlying button element.

You can use this reference to programmatically focus the button.

<FileSource src="/framed/Button/ProgrammaticFocus" />
